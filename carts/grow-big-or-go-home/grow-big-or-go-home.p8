pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--grow big or go home            v0.1.1
--caterpillar games



gs = nil
debug = false

function makeCreature(typeName, radius, posX, posY, color, speed, velAngle)
	-- TODO reassign these based on typeName
	-- local drawFuncProto = drawCircle
	local drawFuncProto = nil
	local hitboxMult = nil

	if typeName == 'player' then
		drawFuncProto = drawPlayerFunc
		hitboxMult = 1
	elseif typeName == 'circle' then
		drawFuncProto = drawCircle
		hitboxMult = 1
	elseif typeName == 'hex' then
		drawFuncProto = drawHex
		hitboxMult = 1
	elseif typeName == 'rhombus' then
		drawFuncProto = drawRhombus
		hitboxMult = sqrt(2)/2
	elseif typeName == 'pill' then
		drawFuncProto = drawPill
		hitboxMult = 1.25
	else
		assert(false)
	end



	function drawFunc(self)
		drawFuncProto(self)
		for child in all(self.children) do
			child:drawFunc()
		end
	end

	-- if color == backgroundColor then
	-- 	assert(false)
	-- end
	return {
		radius = radius,
		orientation = rnd(),		-- draw angle
		phase = 0,
		phaseVel = rnd(0.1),
		omegaDrift = rndMinMax(-0.5, 0.5),
		posX = posX,
		posY = posY,
		typeName = typeName,
		drawFunc = drawFunc,
		parentSpring = nil,
		color = color,
		isEaten = false,
		speed = speed,
		hitboxMult = hitboxMult,
		isGameOver = false,
		velAngle = velAngle,
		velX = 0,
		velY = 0,
		children = {},
		effectiveRadius = function(self) 
			return self.radius * self.hitboxMult
		end,
		printSelf = function(self)
			-- camera()
			-- print(self.posX)
			-- print(self.posY)
			-- print(self.color)
			-- print(self.radius)
			-- print(gs.player.posX)
			-- print(gs.player.posY)
			-- print(haveCollided(gs.player, self))
			-- local creature1 = self
			-- local creature2 = gs.player
			-- local dx = creature1.posX - creature2.posX
			-- local dy = creature1.posY - creature2.posY
			-- local magSq = dx * dx + dy * dy
			-- print(magSq)
			-- local threshold = creature1:effectiveRadius() + creature2:effectiveRadius()
			-- return magSq < (threshold * threshold)
			-- print(self.)
		end
	}
end

circleType = 'circle'
function drawCircle(self)
	circ(self.posX, self.posY, self.radius, self.color)
	-- oval(self.posX - self.radius, self.posY - self.radius, 
	-- 	self.posX + self.radius, self.posY + self.radius,
	-- 	self.color
	--  )
end

function drawPlayerFunc(self)
	local pat = 3855
	fillp(pat)
	circ(self.posX, self.posY, self.radius, self.color + 16 * self.secondary)
	-- Make it distinct
	-- circ(self.posX, self.posY, self.radius-1, self.color)
	fillp()
end

function drawHex(self)
	local point1X = nil
	local point1Y = nil
	local point2X = nil
	local point2Y = nil
	for i = 0, 6 do
		point2X = self.posX + self.radius * cos(i/6 + self.orientation)
		point2Y = self.posY + self.radius * sin(i/6 + self.orientation)
		if point1X != nil then
			line(point1X, point1Y, point2X, point2Y, self.color)
		end
		point1X = point2X
		point1Y = point2Y
	end
end

function drawPill(self)
	local focus1 = {
		x = self.posX + 0.5*self.radius * cos(self.orientation),
		y = self.posY + 0.5*self.radius * sin(self.orientation),
	}
	local focus2 = {
		x = self.posX - self.radius * cos(self.orientation),
		y = self.posY - self.radius * sin(self.orientation),
	}

	local point1 = {
		x = focus2.x - self.radius * cos(self.orientation + 0.25),
		y = focus2.y - self.radius * sin(self.orientation + 0.25),
	}
	local point2 = nil

	for j = 1, 2 do
		local focus = ({focus1, focus2})[j]
		local invert = (j == 1)
		for i = -10, 10 do
			if invert then
				point2 = {
					x = focus.x + self.radius * cos(i / 40 + self.orientation),
					y = focus.y + self.radius * sin(i / 40 + self.orientation)
				}
			else
				point2 = {
					x = focus.x - self.radius * cos(i / 40 + self.orientation),
					y = focus.y - self.radius * sin(i / 40 + self.orientation)
				}
			end

			if point1 != nil then
				line(point1.x, point1.y, point2.x, point2.y, self.color)
			end
			point1 = point2
		end
	end
end

function drawRhombus(self)
	-- self.phase = 0
	self.omegaDrift = 0
	local squishedAngle = 1/8		-- 45 degrees
	local squishedAngle += 1/32 * cos(self.phase)
	-- local longAxis = self.radius + 0.5*self.radius * cos(self.phase)
	-- local shortAxis = self.radius + 0.5*self.radius * sin(self.phase)
	local longAxis = self.radius * cos(squishedAngle)
	local shortAxis = self.radius * sin(squishedAngle)

	local point1X = nil
	local point1Y = nil
	local point2X = nil
	local point2Y = nil

	for i = 0, 4 do
		local effRad = longAxis
		if i % 2 == 0 then
			effRad = shortAxis
		end
		-- local effRad = self.radius

		point2X = self.posX + effRad * cos(i/4 + self.orientation)
		point2Y = self.posY + effRad * sin(i/4 + self.orientation)
		if point1X != nil then
			line(point1X, point1Y, point2X, point2Y, self.color)
		end
		point1X = point2X
		point1Y = point2Y
	end
end

backgroundColor = 6

possibleColors = {
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	-- 11,
	12,
	13,
	14,
	-- 15
}

del(possibleColors, backgroundColor)

function randColor()
	return rnd(possibleColors)
end

-- function makeEnemiesOffScreen(number)
-- 	local ret = {}
-- 	for i = 0, number do
-- 		local angle = rnd()
-- 		local radius = distanceThreshold * 0.75
-- 		local posX = radius * cos(angle) + gs.player.posX
-- 		local posY = radius * sin(angle) + gs.player.posY

-- 		local col = 
-- 	end
-- end

function rndMinMax(_min, _max)
	local span = _max - _min
	return _min + rnd(span)
end

enemyTypes = {
	'circle',
	'hex',
	'pill',
	'rhombus'
}

function makeEnemies(number, offscreen)
	local ret = {}
	for i = 0,number do
		local angle = rnd()
		local posradius = 50 + rnd(64)
		if offscreen then
			posradius = distanceThreshold * 0.75
		end
		local posX = posradius * cos(angle) + gs.player.posX	
		local posY = posradius * sin(angle) + gs.player.posY
		-- local creatureRadius = 10 * rnd() + 1
		local curScale = gs:getScaleParameters()
		local creatureRadius = rndMinMax(curScale.minEnemyRadius, curScale.maxEnemyRadius)
		local creatureSpeed = 1 + rnd(curScale.maxEnemySpeed)

		local col = randColor()
		if col == backgroundColor then
			assert(false)
		end
		local enemytype = enemyTypes[flr(rnd(#enemyTypes)) + 1]
		add(ret, makeCreature(enemytype, creatureRadius, posX, posY, col, creatureSpeed, rnd()))
	end
	return ret
end

scales = {
	{
		maxRadius = 10,
		minEnemyRadius = 1,
		maxEnemyRadius = 20,
		maxEnemySpeed = 50
	},
	{
		maxRadius = 15,
		minEnemyRadius = 1,
		maxEnemyRadius = 25,
		maxEnemySpeed = 40
	},
	{
		maxRadius = 20,
		minEnemyRadius = 2,
		maxEnemyRadius = 30,
		maxEnemySpeed = 30
	},
	{
		maxRadius = 31.25,
		minEnemyRadius = 3,
		maxEnemyRadius = 35,
		maxEnemySpeed = 20
	}
}

defaultFieldOfViewRadius = 63

function _init()
	playerRadius = 3
	local player = makeCreature('player', playerRadius, 64, 64, randColor(), 150)
	-- local secondary = randColor()
	-- while secondary == player.color do
	-- 	secondary = randColor()
	-- end
	-- player.secondary = secondary
	player.color = 7
	player.secondary = 12


	-- playerRadius = 12
	gs = {
		player = player,
		dt = 1/30,
		fieldOfViewRadius = defaultFieldOfViewRadius,
		scaleLevel = 1,
		scaleAnimation = nil,
		getScaleParameters = function(self) 
			return scales[self.scaleLevel]
		end,
		isAtMaxScale = function(self)
			return self.scaleLevel >= #scales
		end,
		score = 0
	}

	gs.enemies = makeEnemies(30, false)

	-- if debug then
	-- 	gs.scaleLevel = 4
	-- 	player.radius = 12
	-- 	player.speed = player.speed / 2 / sqrt(2)
	-- 	gs.enemies = makeEnemies(30, true)
	-- end
end

dirs = {
	left = 0,
	right = 1,
	up = 2,
	down = 3,
	z = 4,
	x = 5
}

rootTwoOverTwo = sqrt(2) / 2

function acceptInput()
	local velX = 0
	local velY = 0
	if btn(dirs.left) then
		velX -= 1
	end

	if btn(dirs.right) then
		velX += 1
	end

	if btn(dirs.up) then
		velY -= 1
	end

	if btn(dirs.down) then
		velY += 1
	end

	if abs(velX) and abs(velY) then
		velX *= rootTwoOverTwo
		velY *= rootTwoOverTwo
		-- Oops, did this worng
		if abs(velX) > 0 and abs(velY) > 0 then
			velX *= rootTwoOverTwo
			velY *= rootTwoOverTwo
		end
	end

	local creature = gs.player

	creature.posX += velX * creature.speed * gs.dt
	creature.posY += velY * creature.speed * gs.dt
end

function moveEnemies()
	-- if true then return end
	for creature in all(gs.enemies) do
		creature.posX += creature.speed * cos(creature.velAngle) * gs.dt
		creature.posY += creature.speed * sin(creature.velAngle) * gs.dt
	end
end	

function hasAnimation()
	return gs.scaleAnimation != nil and costatus(gs.scaleAnimation) != 'dead'
end

function _update()
	if debug then
		if btnp(dirs.x) then
			gs.player.radius = gs:getScaleParameters().maxRadius + 1
		end
	end

	if gs.isGameOver then
		if btnp(dirs.x) then
			_init()
		end
		return
	end

	if hasAnimation() then
		local active, exception = coresume(gs.scaleAnimation)
		if exception then
			color(7)
		  stop(trace(gs.scaleAnimation, exception))
		end
		-- coresume(gs.scaleAnimation)
		return
	end

	acceptInput()

	moveEnemies()

	moveChildren()

	rotateAll()

	collisionDetection()

	cleanUpEnemies()

	cleanUpChildren()

	createEnemies()

	checkScale()

	checkPlayerDead()

	recenter()
end

function cleanUpChildren()
	local newChildren = {}
	for child in all(gs.player.children) do
		if child.parentSpring.countdown > 0 then
			add(newChildren, child)
		end
	end

	gs.player.children = newChildren
end

function rotateAll()
	for creature in all(allCreatures()) do
		creature.orientation += creature.omegaDrift * gs.dt
		creature.phase += creature.phaseVel * gs.dt
	end
end

function recenter()
	local xoff = -gs.player.posX
	local yoff = -gs.player.posY
	for creature in all(allCreatures()) do
		creature.posX += xoff
		creature.posY += yoff
	end
end
	-- eatee.parentSpring = {
	-- 	radius = eater.radius * 0.75,		-- TODO consider a nearly big one
	-- 	elasticity = 5
	-- }

-- function distFrom(creature1, creature2)
	-- local dx = creature1.posX - creature2.posX	
	-- local dy = creature1.posY - creature2.posY
	-- return sqrt(dx * dx + dy * dy)
-- end

function moveChildren()
	local parent = gs.player

	for child in all(parent.children) do
		child.parentSpring.countdown -= 1

		-- local dist = distFrom(parent, child)
		local dx = parent.posX - child.posX	
		local dy = parent.posY - child.posY
		local dist = sqrt(dx * dx + dy * dy)

		local normX = dx / dist
		local normY = dy / dist

		-- local vMag = sqrt(child.velX * child.velX + child.velY * child.velY)

		local dr = dist - child.parentSpring.radius
		local force = child.parentSpring.elasticity * dr

		child.velX += force * normX * gs.dt
		child.velY += force * normY * gs.dt

		child.posX += child.velX * gs.dt
		child.posY += child.velY * gs.dt

		-- Normalize position now (don't let it leave the parent)
		local dx = parent.posX - child.posX	
		local dy = parent.posY - child.posY
		local dist = sqrt(dx * dx + dy * dy)
		local maxDist = parent.radius - child.radius - 1
		if dist > maxDist then
			dx = dx / dist * maxDist
			dy = dy / dist * maxDist
			child.posX = parent.posX - dx
			child.posY = parent.posY - dy
		end
	end
end

function myyield()
	if debug then 
		return
	end
	yield()
end

-- (1/2) ^ (1/10)
-- multiplier = 0.93303299153

-- (1/2) ^ (1/30)
multiplier = 0.97715996843

function allCreatures()
	local ret = {}
	for creature in all(gs.enemies) do
		add(ret, creature)
	end
	for creature in all(gs.player.children) do
		add(ret, creature)
	end
	add(ret, gs.player)

	return ret
end

function checkScale()

	if debug then 
		-- return 
	end

	if gs.player.radius > gs:getScaleParameters().maxRadius then
		if gs:isAtMaxScale() then
			gs.isGameOver = true
			gs.didWin = true
			return
		end


		-- Begin animation
		local startRadius = gs.player.radius
		local startSpeed = gs.player.speed
		gs.scaleAnimation = cocreate(function()
			gs.scaleLevel += 1
			makeEnemies(20, true)
			-- gs.player.radius /= 2;
			for i = 0, 30 do
				gs.fieldOfViewRadius *= multiplier
				for creature in all(allCreatures()) do
					creature.posX *= multiplier
					creature.posY *= multiplier
					creature.radius *= multiplier
					creature.speed *= multiplier
				end
				myyield()
			end
			for i = 0, 30 do
				gs.fieldOfViewRadius /= multiplier
				myyield()
			end
			gs.player.radius = startRadius / 2
			gs.player.speed = startSpeed * sqrt(2) / 2
			gs.fieldOfViewRadius = defaultFieldOfViewRadius
		end)
	end
end

function createEnemies()
	if #gs.enemies > 15 then
		return
	end

	for creature in all(makeEnemies(20, true)) do
		add(gs.enemies, creature)
	end	
end

function checkPlayerDead()
	if gs.player.isEaten then
		gs.isGameOver = true
		-- gs.player.radius = 10
	end
end

distanceThreshold = 128

function tooFarAway(creature)
	local dx = creature.posX - gs.player.posX	
	local dy = creature.posY - gs.player.posY
	return abs(dx) > distanceThreshold or abs(dy) > distanceThreshold
end	

function cleanUpEnemies()
	local newEnemies = {}
	for creature in all(gs.enemies) do
		if not creature.isEaten then
		else
			-- TODO put it somewhere?
		end

		if not creature.isEaten and not tooFarAway(creature) then
			add(newEnemies, creature)
		end
	end

	gs.enemies = newEnemies
end

function haveCollided(creature1, creature2) 
	local dx = creature1.posX - creature2.posX
	local dy = creature1.posY - creature2.posY
	local threshold = creature1:effectiveRadius() + creature2:effectiveRadius()
	-- Bail early to prevent overflow
	if max(abs(dx), abs(dy)) > threshold then
		return false
	end

	local magSq = dx * dx + dy * dy

	return magSq < (threshold * threshold)
end

function eat(eater, eatee)
	eatee.isEaten = true

	local curArea = eater.radius * eater.radius
	local targetArea = curArea + eatee.radius * eatee.radius / 2

	eater.radius = sqrt(targetArea)
	eatee.parentSpring = {
		radius = eater.radius * 0.25 + rnd(0.5),		-- TODO consider a nearly big one
		elasticity = 5,
		countdown = 30 * 30		-- last for 30 seconds
	}
	add(eater.children, eatee)
end

function eatSmaller(creature1, creature2) 
	if creature1:effectiveRadius() > creature2:effectiveRadius() then
		eat(creature1, creature2)
	else
		eat(creature2, creature1)
	end
end

function collisionDetection()
	for creature in all(gs.enemies) do
		if haveCollided(creature, gs.player) then
			if gs.player:effectiveRadius() > creature:effectiveRadius() then
				eat(gs.player, creature)
				gs.score += 1
			else
				-- creature:printSelf()
				-- assert(false)
				-- if not debug then
					eat(creature, gs.player)
				-- end
			end
		end
	end

	-- for i = 1, #gs.enemies do
	-- 	local enemy1 = gs.enemies[i]
	-- 	for j = i+1, #gs.enemies do
	-- 		local enemy2 = gs.enemies[j]
	-- 		if haveCollided(enemy1, enemy2) then
	-- 			eatSmaller(enemy1, enemy2)
	-- 		end
	-- 	end
	-- end
end

function drawBackground()
	cls(backgroundColor)
end

function drawPlayer()
	gs.player:drawFunc()
end

function drawEnemies()
	for creature in all(gs.enemies) do
		creature:drawFunc()
	end
end

function drawGameOver()
	color(7)
	camera()
	if gs.didWin then
		print()
		print(' you won!')
	else
		print()
		print(' you were eaten!')
		print(' game over')
	end
	print(' number eaten: ' .. gs.score)
	local finalRadius = flr(gs.player.radius) << gs.scaleLevel
	print(' final size: ' .. finalRadius)
	print('')
	print(' press ❎ to play again')
end

function drawDebug()
	color(7)
	print(#gs.enemies)
	print(gs.player.radius)
	print(gs.player.speed)
	print(gs.scaleLevel)
end

function drawFieldOfView()
	camera()
	for i = -1, 0 do
		for j = -1, 0 do
			for k = gs.fieldOfViewRadius, 128 do
				circ(64+i, 64+j, k, 0)
			end
		end
	end	
end

function _draw()
	cls(0)

	if gs.isGameOver then
		drawGameOver()
		return
	end
	-- elseif hasAnimation()
	-- 	coresume(gs.scaleAnimation)
	-- end

	drawBackground()

	camera(gs.player.posX - 64, gs.player.posY - 64)

	drawEnemies()

	drawPlayer()

	drawFieldOfView()

	if debug then
		camera()
		drawDebug()
	end
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000066c66666666666000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000666666666c6666666666666666000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000006666666666666c6666666666666666666600000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000006666666666666666c6666666666666666666666600000000000000000000000000000000000000000000
000000000000000000000000000000000000000006666666666666666666c66666666666666666666666c6600000000000000000000000000000000000000000
000000000000000000000000000000000000000666666666666666666666c666666666666666666666666c666000000000000000000000000000000000000000
000000000000000000000000000000000000066666666666666666666666c666666666666666666666666c666660000000000000000000000000000000000000
000000000000000000000000000000000006666666666666666666666666c6666666666666666666666666c66666600000000000000000000000000000000000
000000000000000000000000000000000666666666666666666666666666c66666666666666666666666666c6666666000000000000000000000000000000000
000000000000000000000000000000066666666666666666666666666666c666666666666666666666666666c666666660000000000000000000000000000000
00000000000000000000000000000066666666666666666666666666666c66666666666666666666666666666cc6666666000000000000000000000000000000
00000000000000000000000000006666666666666666666666666666666c6666666666666666666666666666666ccccccc660000000000000000000000000000
00000000000000000000000000066666666666666666666666666666666c66666666666666666666666666666666666666666000000000000000000000000000
0000000000000000000000000066666666666666666666666666666666c666666666666666666666666666666666666666666600000000000000000000000000
000000000000000000000000c666666666666666666666666666666666c666666666666666555555555666666666666666666666000000000000000000000000
0000000000000000000000066c6666666666666666666666666666666c6666666666666555666666666555666666666666666666600000000000000000000000
00000000000000000000006666c66666666666666666666666666666c66666666666655666666666666666556666666666666666660000000000000000000000
00000000000000000000066666c66666666666666666666666666666c66666666666566666666666666666665666666666666666666000000000000000000000
000000000000000000001666666c666666666666666666666666666c666666666655666666666666666666666556666666666666666600000000000000000000
0000000000000000000616666666c6666666666666666666666666c6666666666566666666666666666666666665666666666666666660000000000000000000
00000000000000000066166666666cc666666666666666666666cc66666666665666666666666666666666666666566666666666666666000000000000000000
0000000000000000066616666666666c6666666666666666666c6666666666656666666666666666666666666666656666666666666666600000000000000000
00000000000000006666166666666666cc666666666666666cc66666666666656666666666666666666666666666656666666666666666660000000000000000
0000000000000000666616666666666666ccc666666666ccc6666666666666566666666666666666666666666666665666666666666666660000000000000000
0000000000000006666616666666666666666ccccccccc6666666666666665666666666666666666666666666666666566666666666666666000000000000000
00000000000000666661666666666666666666666666666666666666666665666666666666666666666666666666666566666666666666666600000000000000
00000000000006666661666666666666666666666666666676666666666656666666666666666666666666666666666656666666666666666660000000000000
00000000000006666661666666666666666666666666666677666666666656666666666666666666666666666666666656666666666666666660000000000000
00000000000066666616666666666666666666666666666766766666666656666666666666666666666666666666666656666666666666666666000000000000
00000000000666666616666666666666666666666666666766676666666566666666666666666666666666666666666665666666666666666666600000000000
00000000000666666166666666666666666666666666667666667666666566666666666666666666666666666666666665666666666666666666600000000000
00000000006666661666666666666666666666666666667666666766666566666666666666666666666666666666666665666666666666666666660000000000
00000000006666661666666666666666666666666666676666666766666566666666666666666666666666666666666665666666666666666666660000000000
00000000066666116666666666666666666666666666676666666676666566666666666666666666666666666666666665666666666666666666666000000000
00000000066661666666666666666666666666666666766666666667666566666666666666666666666666666666666665666666666666666666666000000000
00000000666116666666666666666666666666666666766666666666766566666666666666666666666666666666666665666666666666666666666600000000
00000000111666666666666666666666666666666667666666666666676566666666666666666666666666666666666665666666666666666666666600000000
00000001666666666666666666666666666666666667666666666666667566666666666666666666666666666666666665666666666666666666666660000000
00000006666666666666666666666666666666666676666666666666667656666666666666666666666666666666666656666666666666666666666660000000
00000066666666666666666666666666666666666676666666666666676656666666666666666666666666666666666656666666666666666666666666000000
00000066666666666666666666666666666666666766666666666666676656666666666666666666666666666666666656666666666666666666666666000000
00000066666666666666666666666666666666666676666666666666766665666666666666666666666666666666666566666666666666666666666666000000
00000666666666666666666666666666666666666667666666666666766665666666666666666666666666666666666566666666666666666666666666600000
00000666666666666666666666666666666666666667666666666667666666566666666666666666666666666666665666666666666666666666666666600000
00000666666666666666666666666666666666666666766666666667666666656666666666666666666666666666656666666666666666666666666666600000
00006666666666666666666666666666666666666666676666666676666666656666666666666666666666666666656666666666666666666666666666660000
00006666666666666666666666666666666666666666667666666676666666665666666666666666666666666666566666666666666666666666666666660000
00006666666666666666666666666666666666666666666766666766666666666566666666666666666666666665666666666666666666666666666666660000
00006666686666666666666666666666666666666666666676666766666666666655666666666666666666666556666666666666666666666666666666660000
00066666868666666666666666666666666666666666666676667666666666666666566666666666666666665666666666666666666666666666666666666000
00066688666866666666666666666666666666666666666667667666666666666666655666666666666666556666666666666666666666666666666666666000
00066866666688666666666666666666666666666666666666776666666666666666666555666666666555666666666666666666666666666666666666666000
00068666666666866666666666666666666666666666666666676666666666666666666666555555555666666666666666666666666666666666666666666000
00086666666666686666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666000
00066666666666668666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666000
00666666666666666866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666600
00666666666666666686666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666600
00666666666666666668866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666600
00666666666666666666686666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666600
006666666666666666666686666666666666666666666666666666666666666ccc66666666666666666666666666666666666666666666666666666666666600
00666666666666666666666866666666666666666666666666666666666666766676666666666666666666666666666666666666666666666666666666666600
0066666666666666666668866666666666666666666666666666666666666c66666c666666666666666666666666666666666666666666666666666666666600
00666666666666666666866666666666666666666666666666666666666667666667666666666666666666666666666666666666666666666666666666666600
0066666666666666666866666666666666666666666666666666666666666c66666c666666666666666666666666666666666666666666666633666666666600
00866666666666666886666666666666666666666666666666666666666666766676666666666666666666666666666666666666666663333366333336666600
006866666666666686666666666666666666666666666666666666666666666ccc66666666666666666666666666666666666666666336666666666663666600
00668666666666886666666666666666666666666666666666666666666666666666666666666666666666666666666666666666633666666666666666336600
00666866666668666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663366666666666666666663300
00666688666686666666666666666666666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666600
00099999898866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666000
00066666689996666666666666666666666666666666666666666666666666666666666666666666666666666666666666666366666666666666666666666000
00066666666669966666666666666666666666666666666666666666666666666666666666666666666666666666666666663666666666666666666666666000
00066666666666696666666666666666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666666000
00066666666666669966666666666666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666666000
00066666666666666696666666666666666666666666666666666666666666666666666666666666666666666666666666366666666666666666666666666000
00006666666666666669666666666666666666666666666666666666666666666666666666666666666666666666666666366666666666666666666666660000
00006666666666666666966666666666666666666666666666666666666666666666666666666666666666666666666666366666666666666666666666660000
00006666666666666666966666666666666666666666666666666666666666666666666666666666666666666666666663666666666666666666666666660000
00006666666666666666696666666666666666666666666666666666666666666666666666666666666666666666666663666666666666666666666666660000
00000666666666666666669666666666666666666666666666666666666666666666666666666666666666666666666663666666666666666666666666600000
00000666666666666666669666666666666666666666666666666666666666666666666666666666666666666666666663666666666666666666666666600000
00000666666666666666666966666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666666600000
00000066666666666666666966666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666666000000
00000066666666666666666966666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666666000000
00000066666666666666666696666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666666000000
00000006666666666666666696666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666660000000
00000006666666666666666696666666666666666666666666666666666666666666666666666666666666666666666636666666666666666666666660000000
00000000666666666666666696666666666666666666666666666666666666666666666666666666666666666666666366666666666666666666666600000000
00000000666666666666666696666666666666666666666666666666666666666666666666666666666666666666666366666666666666666666666600000000
00000000066666666666666696666666666666666666666666666666666666666666666666666666666666666666666366333333366666666666666000000000
00000000066666666666666696666666666666666666666666666666666666666666666666666666666666666666666333666666633366666666666000000000
00000000006666666666666696666666666666666666666666666666666666666666666666666666666666666666663366666666666636666666660000000000
00000000006666666666666696666666666666666666666666666666666666666666666666666666666666666666336366666666666663366666660000000000
00000000000666666666666966666666666666666666666666666666666666666666666666666666666666666663666366666666666666636666600000000000
00000000000666666666666966666666666666666666666666666666666666666666666666666666666666666636663666666666666666663666600000000000
00000000000066666666666966666666666666666666666666666666666666666666666666666666666666666636663666666666666666663666000000000000
00000000000006666666669666666666666666666666666666666666666666666666666666666666666666666366663666666666666666666360000000000000
00000000000006666666669666666666666666666666666666666666666666666666666666666666666666663666663666666666666666666630000000000000
00000000000000666666696666666666666666666666666666666666666666666666666666666666666666663666663666666666666666666600000000000000
00000000000000066666966666666666666666666666666666666666666666666666666666666666666666663666663666666666666666666000000000000000
00000000000000006666966666666666666666666666666666666666666666666666666666666666666666636666636666666666666666660000000000000000
00000000000000006669666666666666666666666666666666666666666666666666666666666666666666636666636666666666666666660000000000000000
00000000000000000696666666666666666666666666666666666666666666666666666666666666666666636666636666666666666666600000000000000000
00000000000000000066666666666666666666666666666666666666666666666666666666666666666666636666636666666666666666000000000000000000
00000000000000000006666666666666666666666666666666666666666666666666666666666666666666636666636666666666666660000000000000000000
00000000000000000000666666666666666666666666666666666666666666666666666666666666666666636666366666666666666600000000000000000000
00000000000000000000066666666666666666666666666666666666666666666666666666666666666666636666366666666666666000000000000000000000
00000000000000000000006666666666666666666666666666666666666666666666666666666666666666663666366666666666660000000000000000000000
00000000000000000000000666666666666666666666666666666666666666666666666666666666666666663666366666666666600000000000000000000000
00000000000000000000000066666666666666666666666666666666666666666666666666666666666666663666366666666666000000000000000000000000
00000000000000000000000000666666666666666666666666666666666666666666666666666666666666666366636666666600000000000000000000000000
00000000000000000000000000066666666666666666666666666666666666666666666666666666666666666636636666666000000000000000000000000000
00000000000000000000000000006666666666666666666666666666666666666666666666666666666666666636663666660000000000000000000000000000
00000000000000000000000000000066666666666666666666666666666666666666666666666666666666666663663666000000000000000000000000000000
00000000000000000000000000000006666666666666666666666666666666666666666666666666666666666666333660000000000000000000000000000000
00000000000000000000000000000000066666666666666666666666666666666666666666666666666666666666663000000000000000000000000000000000
00000000000000000000000000000000000666666666666666666666666666666666666666666666666666666666600000000000000000000000000000000000
00000000000000000000000000000000000006666666666666666666666666666666666666666666666666666660000000000000000000000000000000000000
00000000000000000000000000000000000000066666666666666666666666666666666666666666666666666000000000000000000000000000000000000000
00000000000000000000000000000000000000000666666666666666666666666666666666666666666666600000000000000000000000000000000000000000
00000000000000000000000000000000000000000000666666666666666666666666666666666666666600000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000666666666666666666666666666666666600000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000066666666666666666666666666000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000066666666666666000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__meta:cart_info_start__
cart_type: game
game_name: Grow Big or Go Home
# Leave blank to use game-name
game_slug: 
jam_info:
  - jam_name: TriJam
    jam_number: 96
    jam_url: null
    jam_theme: Microbiology
tagline: Eat the other microbes to grow big...or be eaten yourself!
develop_time: 3h 40m 0s
description: |
  Under the microscope it's eat or be eaten. 
  Eat smaller microbes to make yourself bigger. 
  But don't touch anything that's bigger than you are! 
  Grow big enough and you will win the game.
controls:
  - inputs: [ARROW_KEYS]
    desc:  move
  - inputs: [X]
    desc:  start a new game when the game ends
hints: ''
acknowledgements: ''
to_do: []
version: 0.1.1
img_alt: Small microbe surrounded by bigger microbes

number_players: [1]
__meta:cart_info_end__
