pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
--{GAMENAME}
--{AUTHORINFO} 



function makeGame(init, draw, update)
	return {
		isInitialized = false,
		init = init,
		draw = draw,
		update = update,
		isGameOver = false,
		gameOverState = nil,
		startTime = t(),
		endTime = nil,
		currentAnimation = nil
	}
end




dirs = {
	left = 0,
	right = 1,
	up = 2,
	down = 3,
	z = 4,
	x = 5
}

gameOverWin = 'win'
gameOverLose = 'lose'

gs = nil
lightsout = 'lightsout'
function _init()
	gs = {
		games = {
			[lightsout] = makeLightsOut()
		},
		activeGameIndex = lightsout,
		getActiveGame = function(self)
			return self.games[self.activeGameIndex]
		end,
		activateGame = function(self, game)
			game = game or self:getActiveGame()
			if not game.isInitialized then
				game:init()
				game.isInitialized = true
			end
		end
	}


	-- gs = {
	-- 	isGameOver = false,
	-- 	gameOverState = nil,
	-- 	startTime = t(),
	-- 	endTime = nil,
	-- 	currentAnimation = nil
	-- }
end


function makeLightsOut()


gridxDim = 3
gridyDim = 3

selectedCell = {
	x = 1,
	y = 2
}

dir = {
	left = 0,
	right = 1,
	up = 2,
	down = 3
}

-- off color, on color
houseColors = {
	{13, 12},	-- mauve, blue
	{2, 14},	-- pink, purple
	{4, 9}		-- brown, orange
}

-- sprite number
houseStyles = {
	2,
	4
}

function makeCell(isOn, colInd, styleInd) 
	return {
		isOn = isOn,
		colInd = colInd,
		styleInd = styleInd
	}
end

drawXOff = 24
drawYOff = 16

function setDrawOffsets()
	if gridxDim == 3 then
		drawXOff = 24
		drawYOff = 16
	elseif gridxDim == 4 then
		drawXOff = 24 - 8
		drawYOff = 16
	else
		drawXOff = 24 - 17
		drawYOff = 16
	end

end

animatedPlayerPosition = {
	x = 64,
	y = -6,
	vx = 0,
	vy = 30
}

local function _init()

animatedPlayerPosition = {
	x = 64,
	y = -6,
	vx = 0,
	vy = 30
}

	menuitem(1, "play easy", doEasyLevel)
	menuitem(2, "play medium", doMediumLevel)
	menuitem(3, "play hard", doHardLevel)

	-- srand()		-- test
	gameState.isWin	 = false
	gameState.isPlayerEntry = true
	gameState.isRandomizing = true
	gameState.randomizeCountDown = 2 * 30
	gameState.skipRandAnimation = false
	-- sfx(4, 1)
	gameState.solution = {{x = 1, y = 2}, {x = 2, y = 3}}-- generateRandomization()
	gameState.solution = generateRandomization()
	cameraY = 0
	gameState.grid = {}
	for i = 1, gridyDim do
		gameState.grid[i] = {}
		for j = 1, gridxDim do
			gameState.grid[i][j] = makeCell(false, flr(rnd(#houseColors)) + 1, flr(rnd(#houseStyles)) +1)
		end
	end

	setDrawOffsets()

	-- for i = 1, gridyDim do
	-- 	for j = 1, gridxDim do
	-- 		if rnd() > 0.5 then
	-- 			-- todo record this
	-- 			toggleCell(j, i)
	-- 		end
	-- 	end
	-- end

	-- toggleCell(1,1)
	-- toggleCell(3,3)
	-- randomizeGrid()


	-- todo randomize
end

function shuffle(tbl)
  for i = #tbl, 2, -1 do
    local j = flr(rnd(i)) + 1
    tbl[i], tbl[j] = tbl[j], tbl[i]
  end
  return tbl
end



function generateRandomization() 
	list = {}		-- the ones to hit
	for i = 1, gridyDim do
		for j = 1, gridxDim do
			for k = 1, (2) do
				-- redundant...but better to show...
				if rnd() > 0.5 then
					list[#list + 1] = {x=j, y=i}		
				end
			end
		end
	end
	return shuffle(list)
end

function toggleCell(x, y)
	for xoff = -1, 1 do
		if (1 <= x + xoff) and (x + xoff <= gridxDim) then
			gameState.grid[y][x + xoff].isOn = not gameState.grid[y][x + xoff].isOn
		end
	end

	for yoff = -1, 1 do
		if (1 <= y + yoff) and (y + yoff <= gridyDim) and (yoff != 0) then
			gameState.grid[y + yoff][x].isOn = not gameState.grid[y + yoff][x].isOn
		end
	end

end

function doEasyLevel()
	gridxDim = 3
	gridyDim = 3
	_init()
end


function doMediumLevel()
	gridxDim = 4
	gridyDim = 4
	_init()
end

function doHardLevel()
	gridxDim = 5
	gridyDim = 5
	_init()
end


local function _update()
	-- toggleCell(3, 2)
	acceptInput()

	checkWinCondition()

	actOnWinCondition()	

	updateGameState()

	if gameState.isPlayerEntry then
		animatedPlayerPosition.x += animatedPlayerPosition.vx * 1/30.0
		animatedPlayerPosition.y += animatedPlayerPosition.vy * 1/30.0
	end
end

function updateGameState()
	if gameState.nextLevelCountdown then
		gameState.nextLevelCountdown -= 1
		if gameState.nextLevelCountdown <= 0 then
			gameState.isNextLevel = true
		end
	end

	if gameState.isRandomizing then
		if gameState.skipRandAnimation then
			for toToggle in all(gameState.solution) do
				toggleCell(toToggle.x, toToggle.y)
			end
			gameState.solution = {}
		end

		gameState.randomizeCountDown -= 1
		if #gameState.solution == 0 then
			gameState.isRandomizing = false
		elseif gameState.randomizeCountDown < 0 then
			gameState.isPlayerEntry = false;
			local toToggle = del(gameState.solution, gameState.solution[1])
			selectedCell.x = toToggle.x
			selectedCell.y = toToggle.y
			toggleCell(toToggle.x, toToggle.y)
			gameState.randomizeCountDown = 10	-- 3 times a second
		end
	else
		gameState.isPlayerEntry = false
	end

end
	

gameState = {
	grid = nil,
	isWin = false
}

function incDim()
	gridxDim += 1
	gridyDim += 1
end

cameraSpeed = 3	-- debugg

maxDim = 5

nextLevelCountdown = 5 * 30

function actOnWinCondition() 
	if gameState.isWin then
		cameraY -= cameraSpeed
		if (cameraY < skyOffset - 30) then
			cameraY = skyOffset - 30
			if gameState.isNextLevel then
				incDim()
				_init()
			elseif gridyDim < maxDim then
				gameState.startNextLevelCountdown = true
				gameState.nextLevelCountdown = nextLevelCountdown
			else
				-- idk?
			end

			-- TODO add more of a delay

		end
	end
end

function checkWinCondition()
	if gameState.isRandomizing then
		return
	end

	if gameState.isWin then
		return
	end
	-- todo
	gameState.isWin = false
	for x = 1, gridxDim do
		for y = 1, gridyDim do
			if gameState.grid[y][x].isOn then
				return
			end
		end
	end
	-- Yay, all off
	-- tODO
	gameState.isWin = true
	sfx(3)

end

canceldraw = false

lastButton = nil



function acceptInput()
	if lastButton == btn() or gameState.isWin then
		return
	end

	if gameState.isRandomizing then
		if btn(4) then		-- Z
			gameState.skipRandAnimation = true
		end
		return
	end

	if btn(dir.up) and (selectedCell.y > 1) then
		selectedCell.y -= 1
	end

	if btn(dir.down) and (selectedCell.y < gridyDim) then
		selectedCell.y += 1
	end

	if btn(dir.left) and (selectedCell.x > 1) then
		selectedCell.x -= 1
	end

	if btn(dir.right) and (selectedCell.x < gridxDim) then
		selectedCell.x += 1
	end

	if btn(5) then
		toggleCell(selectedCell.x, selectedCell.y)
		-- if gameState.grid[selectedCell.y][selectedCell.x].isOn then
		-- 	sfx(1)
		-- else
		-- 	sfx(2)
		-- end
	end

	lastButton = btn()
end

function drawCharacter()
	if gameState.isPlayerEntry then
		spr(1, animatedPlayerPosition.x, animatedPlayerPosition.y, 1, 1, 0, 1)
		return
	end


	local x0 = 17 * selectedCell.x + 6 + drawXOff
	local y0 = 17 * selectedCell.y - 2 + drawYOff

	if gameState.isRandomizing then
		-- make it consistent
		srand(#gameState.solution)
		local flipX = rnd() > 0.5
		local flipY = rnd() > 0.5
		local spriteNumber = 1
		if flipX then
			spriteNumber = 17
		end
		spr(spriteNumber, x0, y0, 1, 1, flipX, flipY)
		if gameState.randomizeCountDown == 1 then
			sfx(0)
		end
		-- play a sound
	else
		spr(1, x0, y0)
	end

end




function drawGrid()
	pal()

	for i = 1, gridyDim do
		for j = 1, gridxDim do
			local x0 = j * 17 + drawXOff
			local y0 = i * 17 + drawYOff
			local col = nil

			local cell = gameState.grid[i][j]
			local spriteNumber = houseStyles[cell.styleInd]

			if cell.isOn then
				col = 10	-- window color
				-- bright pink...
				pal(2, houseColors[cell.colInd][2])
			else
				col = 5

				pal(2, houseColors[cell.colInd][1])

			end
			-- 13 12

			-- if (j == selectedCell.x) and (i == selectedCell.y) then
			-- 	col = 6
			-- end

			pal(10, col)

			spr(spriteNumber, x0, y0, 2, 2)
			-- rectfill(x0, y0, x0 + 15, y0 + 15, col)

			pal()

		end
	end
end


cameraY = 0

skyOffset = -230

function drawBackground() 


	camera(0, cameraY)
	-- draw sky
	map(0, 0, 0, skyOffset, 16, 64)

	-- draw ground
	map(57, 32, 0, 42, 16, 16)
	-- camera()
end

function _draw()
	if canceldraw then
		return
	end
	cls()
	drawBackground()
	drawGrid()
	drawCharacter()
end

return makeGame(_init, _update, _draw)
end

function rndrange(_min, _max)
	local diff = _max - _min
	return _min + diff * rnd()
end

metaTable = {
	__add = function(v1, v2)
		return vec2(v1.x + v2.x, v1.y + v2.y)
	end,
	__sub = function(v1, v2)
		return vec2(v1.x - v2.x, v1.y - v2.y)
	end,
	__mul = function(s, v)
		if type(s) == 'table' then
			s,v = v,s
		end

		return vec2(s * v.x, s * v.y)
	end,
	__div = function(v, s)
		return vec2(v.x / s, v.y / s)
	end,
	__eq = function(v1, v2)
		return v1.x == v2.x and v1.y == v2.y
	end
}

function vec2fromAngle(ang)
	return vec2(cos(ang), sin(ang))
end

function vecFromDir(dir)
	if dir == dirs.left then
		return vec2(-1, 0)
	elseif dir == dirs.right then
		return vec2(1, 0)
	elseif dir == dirs.up then
		return vec2(0, -1)
	elseif dir == dirs.down then
		return vec2(0, 1)
	else
		assert(false)
	end
end

function modInc(x, mod)
	return (x + 1) % mod
end

function modDec(x, mod)
	return (x - 1) % mod
end

function vec2(x, y)
	local ret = {
		x = x,
		y = y,
		norm = function(self)
			return vec2fromAngle(atan2(self.x, self.y))
		end,
		squareDist = function(self, other)
			return max(abs(self.x - other.x), abs(self.y - other.y))
		end,
		taxiDist = function(self, other)
			return abs(self.x - other.x) + abs(self.y - other.y)
		end,
		-- Beware of using this on vectors that are more than 128 away
		eucDist = function(self, other)
			local dx = self.x - other.x
			local dy = self.y - other.y
			-- return sqrt(dx * dx + dy * dy)
			return approx_magnitude(dx, dy)
		end,
		isWithin = function(self, other, value)
			return self:taxiDist(other) <= value and
				self:eucDist(other) <= value
		end,
		isOnScreen = function(self, extra)
			if extra == nil then extra = 0 end

			return extra <= self.x and self.x <= 128 - extra
				and extra <= self.y and self.y <= 128 - extra
		end,
		length = function(self)
			return self:eucDist(vec2(0, 0))
		end,
		angle = function(self)
			return atan2(self.x, self.y)
		end
	}

	setmetatable(ret, metaTable)

	return ret
end


function hasAnimation()
	return gs.currentAnimation != nil and costatus(gs.currentAnimation) != 'dead'
end


function _update()
	gs:activateGame()
	gs:getActiveGame():update()
	-- if not gs:getActiveGame()
	-- if gs.isGameOver then
	-- 	if gs.endTime == nil then
	-- 		gs.endTime = t()
	-- 	end
	-- 	-- Restart
	-- 	if btnp(dirs.x) then
	-- 		_init()
	-- 	end
	-- 	return
	-- end

	-- if hasAnimation() then
	-- 	local active, exception = coresume(gs.currentAnimation)
	-- 	if exception then
	-- 		stop(trace(gs.currentAnimation, exception))
	-- 	end

	-- 	return
	-- end

	-- acceptInput()

end

-- function drawGameOverWin()

-- end

-- function drawGameOverLose()

-- end

local function _draw()
	if not gs:getActiveGame().isInitialized then
		return
	end
	gs:getActiveGame():draw()
	-- cls(0)
	-- if gs.isGameOver then
	-- 	if gs.gameOverState == gameOverWin then
	-- 		drawGameOverWin()
	-- 	else
	-- 		drawGameOverLose()
	-- 	end
	-- 	return
	-- end

	-- Draw
end

__gfx__
00000000000000000000005555000000000000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000a00000000055555500000000006656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000aaa0000000555555550000000665655566600000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000a1a1a000005555555555000066555655555566000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000aaa0000055555555555500655555565555520000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000a0a0000555555555555550055555565555220000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000022222222222200022555556552220000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000222222222222000222255565222a0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000022a5a22a5a22000222222622222a0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000022555225552200022a22262a22220000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000a0000022a5a22a5a2200022a22262a22220000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aa1a000022222222222200022222262222220000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000aaaa00022222442222200022222262222220000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aa1a000022222442222200002222262222000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000a0000022222442222200000022262200000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000262000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333333333333333311111111010101010101010101010101000000000000000000000000ffffffff0f0f0f0f0000000000000000000000000000000000000000
3333333333333333011101111111111101010101000000001000100000000000000000000fff0fffffffffff0000000000000000000000000000000000000000
3333333333333b3311111111101010101010101010101010000000000000000000000000fffffffff0f0f0f00000000000000000000000000000000000000000
333333333333b33311111111111111111010101000000000000000000001000000000000ffffffffffffffff0000000000000000000000000000000000000000
333333333333333311111111010101010101010101010101000000000000000000000000ffffffff0f0f0f0f0000000000000000000000000000000000000000
333333333333333311011101111111110101010100000000001000100000000000000000ff0fff0fffffffff0000000000000000000000000000000000000000
333333333333333311111111101010101010101010101010000000000000000000000000fffffffff0f0f0f00000000000000000000000000000000000000000
333333333333333311111111111111111010101000000000000000000000000000000000ffffffffffffffff0000000000000000000000000000000000000000
000000003333333311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
000000003333333311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
000000003bb3333311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
0000000033b3333311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
00000000333333b311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
0000000033333b3311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
000000003333333311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
000000003333333311111111000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000070000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000070f00000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000
00f00070000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7000a00000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07000070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000070000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000700000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
23232323232323232323232323232323000000000000000000000000000000000000000000000000000000000000000000000000000000000002120213020202
02020202020213120200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
23232323232323232323232323232323000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202021302
02021302020202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222000000000000000000000000222222222222222222222222222222220000000000000000000000000002021202021202
02020202130202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222000000000000000000000000222222222222222222222222222222220000000000000000000000000002020202020202
02020202020202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222000000000000000000000000222222222222222222222222222222220000000000000000000000000002020202020202
12121312020202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222000000000000000000000000020212020202020202020202020202130000000000000000000000000002020202021302
02020202020202021200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222000000000000000000000000022202020202131302020212020202020000000000000000000000000002021302020213
02020202020213020200001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020202
02020213021202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000222222222222222222222222222222220000000000000000000000000002020213020202
02020202020202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000222222222222222222222222222222220000000000000000000000000002020212120213
12130202020202020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000222222222222222222222222222222220000000000000000000000000202020202120202
02020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000020212020202020202020202020202130000000000000000000000000013021212130202
12020212020213120200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000022202020202131302020212020202020000000000000000000000000002020202130212
02130202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000220202120202020202020202020202020000000000000000000000000002020202020202
02020202021302020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000220212020202020202130202130212020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000220202120202131202021202020202020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000220202020202020202020202020202020000000000000000000000000000000000000000
__meta:cart_info_start__
cart_type: game
# Embed: 750 x 680
game_name: Game Template
# Leave blank to use game-name
game_slug: 
jam_info:
  - jam_name: TriJam
    jam_number: XX
    jam_url: null
    jam_theme: 'XXX'
tagline: XXXX
time_left: '0:0:0'
develop_time: ''
description: |
  
controls:
  - inputs: [X]
    desc: XXXX
hints: ''
acknowledgements: ''
to_do: []
version: 0.1.0
img_alt: XXXX
about_extra: ''
number_players: [1]
__meta:cart_info_end__


