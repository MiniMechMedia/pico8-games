pico-8 cartridge // http://www.pico-8.com
version 39
__lua__
--prime time                     v0.1.0
--mini mech media



gs = nil

dirs = {
	left = 0,
	right = 1,
	up = 2,
	down = 3,
	z = 4,
	x = 5
}

outlineMap = {
    [0] = 1,
    12,
    8,
    11,
    9,
    6,
    7,
    2,
    2,
    4,
    4,
    3,
    1,
    2,
    2,
    4
}

gameOverWin = 'win'
gameOverLose = 'lose'

function _init()
    music(21, 2000)
    -- drawGlobe()
	gs = {
		isGameOver = false,
		isDrawGameOver = false,
		restartGameDelay = 1,
        dt = 1/30,
        score = 0,
		shouldDelayRestart = function(self)
			if self.endTime == nil then
				return false
			end

			return time() - self.endTime <= self.restartGameDelay
		end,
		gameOverState = nil,
		startTime = time(),
        getElapsed = function(self)
            return time() - self.startTime
        end,
		endTime = nil,
		currentAnimation = nil,
        asteroids = {},
        player = makePlayer(),
        bullets = {}
	}

        -- populate asteroids with 3 random asteroids
        -- for i=1,3 do
        --     add(gs.asteroids, makeAsteroid(calcNumber()))
        -- end
    -- add(gs.asteroids, makeAsteroid(calcNumber(11*3*3)))
    -- a1 = makeAsteroid(calcNumber(11*9))
    -- a2 = makeAsteroid(calcNumber(2*5*5))
    -- a3 = makeAsteroid(calcNumber(2*2*3*3*2))
    -- a1.pos = vec2(64, 0)
    -- a2.pos = vec2(64, 20)
    -- a3.pos = vec2(64, 40)
    -- add(gs.asteroids, a1)
    -- add(gs.asteroids, a2)
    -- add(gs.asteroids, a3)
    -- local spacing = 20
    -- for i=2,99 do
    --     local asteroid = makeAsteroid(calcNumber(i))
    --     asteroid.pos = vec2(64,0 -( (i-2) * spacing))
    --     add(gs.asteroids, asteroid)
    -- end
end

function makeBullet(pos)
    local bullet = {
        pos = pos,
        vel = vec2(0, -100), -- velocity indicating upward movement
        update = function(self)
            self.pos = self.pos + self.vel * gs.dt
        end,
        draw = function(self)
            -- line(self.pos.x, self.pos.y, self.pos.x, self.pos.y - 4) -- draw bullet as a line to represent a laser
            line(self.pos.x - 2, self.pos.y, self.pos.x - 2, self.pos.y - 4, 8) -- parallel line to the left
            line(self.pos.x + 2, self.pos.y, self.pos.x + 2, self.pos.y - 4, 8) -- parallel line to the right
            -- line(self.pos.x + 3, self.pos.y, self.pos.x + 3, self.pos.y - 4, 14) -- parallel line to the right
        end
    }
    return bullet
end
-- pal({129,1,131,139,138,11,135,7},1)
t=0

function makePlayer()
    local player = {
        pos = vec2(64, 120), -- starting position in the middle of the screen
        speed = 50,
        shootCooldown = 10, -- time in seconds between shots
        shootCountdown = 0, -- countdown timer for shooting
        update = function(self)
            local vel = vec2(-tonum(btn(dirs.left)) + tonum(btn(dirs.right)),
                -tonum(btn(dirs.up)) + tonum(btn(dirs.down))
            )
            vel = vel:norm()
            self.pos += self.speed * gs.dt * vel
            self.pos.x = max(0, min(self.pos.x, 128))
            self.pos.y = max(0, min(self.pos.y, 128))
            self.shootCountdown -= 1
            if btn(dirs.x) then
                if self.shootCountdown <= 0 then
                    sfx(0)
                    add(gs.bullets, makeBullet(self.pos))
                    self.shootCountdown = self.shootCooldown
                end
            end
        end,
        draw = function(self)
            -- https://twitter.com/MunroHoberman/status/1290317949845348353
            -- ::_::
            z=0for j=-1,1do
            for k=-1,1do
            -- camera(j-63,k-63)
            for f=3,7do
            line()for i=0,f do
            -- circ(rnd(128)-64,rnd(128)-64,1,rnd(3))
            h=(i+t)/f
            local x,y=f*f*cos(h)*cos(t/f),f*f*sin(h)*sin(t/f)
            x = x/3 + self.pos.x
            y = y/3 + self.pos.y
            
            line(x,y,2)
            circ(x,y,1.5,8)
            end
            end
            z+=1end
            end
            t+=.03
            line()
            -- flip()goto _
            -- drawing logic here
            -- circ(self.pos.x, self.pos.y, 10) -- draw player as a circle for now
        end
    }
    return player
end




function makeAsteroid(factor_info, pos, vel)

    return {
   		factors = factor_info[1],
        number = factor_info[2],
        radius = (factor_info[2])^0.5 + 2,
        targetRadius = (factor_info[2])^0.5 + 2,
        color = rnd({5,6,7,8,9}),
        getNodes = function(self)
            local nodes = {}
            local overlap = 1
            local prevX = self.pos.x
            for i=1,#self.factors-1 do
                -- local radius = self:getRadius(sqrt())
                local avg = sqrt(self.factors[i]*self.factors[i+1])
                local radius = self:getRadius(avg)
                -- local radius = 5 / ((1/self.factors[i]) + (1/self.factors[i+1]))
                -- local radius = (self:getRadius(self.factors[i]) + self:getRadius(self.factors[i+1]))/2
                local newX = prevX + radius + overlap
                local node = {
                    pos = vec2(newX, self.pos.y), 
                    radius = radius, 
                    -- color = i % 16,
                    index = i
                }
                add(nodes, node)
                prevX = newX
            end
            local totalWidth = prevX - self.pos.x
            local shiftAmount = totalWidth / 2
            for i, node in ipairs(nodes) do
                node.pos.x = node.pos.x - shiftAmount
            end
            return nodes
        end,
        isPrime = #factor_info[1] < 2,
   		pos = pos or vec2(rndrange(30, 128-30), rndrange(0, 30)),
   		-- vel = vec2(0, rndrange(1, 2)),
        vel = vel or vec2(0, 15),
        getRadius = function(self)
            -- return sqrt(sqrt(number or self.number)) * 3
            -- return (self.number)^0.5 + 2
            return self.radius
        end,
   		draw = function(self)

            -- drawGlobe()

            
            -- if self.isHit then
            --     circ(self.pos.x, self.pos.y, 8, 9)
            -- end
            -- for i, factor in ipairs(self.factors) do
            --     print(tostr(factor) .. ' ' .. tostr(i))
            -- end

            -- if self.isPrime then
            if self.isPrime then
                circfill(self.pos.x, self.pos.y, self:getRadius()+1, outlineMap[self.color])
            end
            circfill(self.pos.x, self.pos.y, self:getRadius(), self.color)

            -- elseif #self.factors == 2 then
            --     local scale = sqrt(self.factors[1], self.factors[2]) / 2
            --     ovalfill(self.pos.x - 8*scale, self.pos.y - 5*scale, self.pos.x + 8*scale, self.pos.y + 5*scale, self.color)
            -- else
            --     local nodes = self:getNodes()
            --     for i, node in ipairs(nodes) do
            --         circfill(node.pos.x, node.pos.y, node.radius, self.color)
            --     end
            -- end
   			-- circ(self.pos.x, self.pos.y, 8, 9)
   			print(self.number, self.pos.x - 1 - (1 * (#tostr(self.number)-1)), self.pos.y - 2, 0)
   		end,
   		update = function(self)
            -- local radDiff = self.targetRadius - self.radius
            -- radDiff *= gs.dt * 2
            -- self.radius += radDiff * gs.dt * 2
            if self.targetRadius < self.radius then
                self.radius -= 0.5
            end

            if self.radius < self.targetRadius then
                self.radius = self.targetRadius
            end

   			self.pos = self.pos + self.vel*gs.dt
            self.vel.x += -self.vel.x * gs.dt
   		end,
        checkCollisionWithBullet = function(self, bullet)
            if bullet.pos:isWithin(self.pos, self:getRadius()+1) then
                return true
            end
            -- if self.isPrime then

            -- elseif #self.factors == 2 then
            --     local scale = sqrt(self.factors[1], self.factors[2]) / 2
            --     local left = self.pos.x - 8*scale
            --     local top = self.pos.y - 5*scale
            --     local right = self.pos.x + 8*scale
            --     local bottom = self.pos.y + 5*scale
            --     if bullet.pos.x >= left and bullet.pos.x <= right and bullet.pos.y >= top and bullet.pos.y <= bottom then
            --         return self:getNodes()[1]
            --     end
            -- else
            --     -- Code to check collision between asteroid and bullet
            --     local nodes = self:getNodes()
            --     for i, node in ipairs(nodes) do
            --         if node.pos:isWithin(bullet.pos, node.radius) then
            --             -- debugDraw = function()
            --             --     circfill(node.pos.x, node.pos.y, node.radius, 13)
            --             -- end
            --             return node
            --         end
            --     end
            -- end
            -- else
            --     return false
            -- end
            return false
        end,
        split = function(self, index)
            index = index or flr(rndrange(1, #self.factors))
            -- index = 1
            -- assert(index > 0, "Index must be greater than 0")

            assert(#self.factors > index, "gotta be " .. tostr(#self.factors) .. ' ' .. tostr(index))
            local list1 = {}
            local list2 = {}
            for i=1,index do
                add(list1, self.factors[i])
            end
            for i=index+1,#self.factors do
                add(list2, self.factors[i])
            end
            assert(#list1 > 0, "List1 must not be empty after split")
            assert(#list2 > 0, "List2 must not be empty after split")
            local asteroid1 = makeAsteroid({list1, productOfList(list1)}, self.pos, vec2(-10, self.vel.y))
            asteroid1.radius = self:getRadius()
            local asteroid2 = makeAsteroid({list2, productOfList(list2)}, self.pos, vec2(10, self.vel.y))
            asteroid2.radius = self:getRadius()
            add(gs.asteroids, asteroid1)
            add(gs.asteroids, asteroid2)
            del(gs.asteroids, self)
            -- return {
            --     asteroid1,
            -- }
        end
   	}
end

function getPrimes()
	local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}
	return primes
end

function calcNumber(number)
    number = number or (flr(rnd(99)) + 2)
    local original = number
    local factors = getFactors(number)
    factors = fischerShuffle(factors)
    return {factors, original}
end

function fischerShuffle(tbl)
    local count = #tbl
    while count > 1 do
        local index = flr(rnd(count)) + 1
        tbl[count], tbl[index] = tbl[index], tbl[count]
        count = count - 1
    end
    return tbl
end


function sortMiddle(table)
    local ret = {}
    local oddIndices = {}
    local evenIndices = {}
    for i=1,#table do
        if i % 2 == 1 then
            add(oddIndices, table[i])
        else
            add(evenIndices, table[i])
        end
    end
    for i=1,#oddIndices do
        add(ret, oddIndices[i])
    end
    for i=#evenIndices,1,-1 do
        add(ret, evenIndices[i])
    end
    return ret
end

function getFactors(number)
    local factors = {}
    local i = 1
    local primes = getPrimes()
    while number > 1 do
        while (number % primes[i]) == 0 do
            add(factors, primes[i])
            number = number / primes[i]
        end
        i += 1
    end
    return factors
end

function productOfList(numbers)
    local product = 1
    for i=1,#numbers do
        product = product * numbers[i]
    end
    return product
end


function rndrange(_min, _max)
	local diff = _max - _min
	return _min + diff * rnd()
end


metaTable = {
	__add = function(v1, v2)
		return vec2(v1.x + v2.x, v1.y + v2.y)
	end,
	__sub = function(v1, v2)
		return vec2(v1.x - v2.x, v1.y - v2.y)
	end,
	__mul = function(s, v)
		if type(s) == 'table' then
			s,v = v,s
		end

		return vec2(s * v.x, s * v.y)
	end,
	__div = function(v, s)
		return vec2(v.x / s, v.y / s)
	end,
	__eq = function(v1, v2)
		return v1.x == v2.x and v1.y == v2.y
	end
}

function vec2fromAngle(ang)
	return vec2(cos(ang), sin(ang))
end

function vecFromDir(dir)
	if dir == dirs.left then
		return vec2(-1, 0)
	elseif dir == dirs.right then
		return vec2(1, 0)
	elseif dir == dirs.up then
		return vec2(0, -1)
	elseif dir == dirs.down then
		return vec2(0, 1)
	else
		assert(false)
	end
end

function modInc(x, mod)
	return (x + 1) % mod
end

function modDec(x, mod)
	return (x - 1) % mod
end

function vec2(x, y)
	local ret = {
		x = x,
		y = y,
		norm = function(self)
            if self.x == 0 and self.y == 0 then return self end
			return vec2fromAngle(atan2(self.x, self.y))
		end,
		squareDist = function(self, other)
			return max(abs(self.x - other.x), abs(self.y - other.y))
		end,
		taxiDist = function(self, other)
			return abs(self.x - other.x) + abs(self.y - other.y)
		end,
		-- Beware of using this on vectors that are more than 128 away
		eucDist = function(self, other)
			local dx = self.x - other.x
			local dy = self.y - other.y
			-- return sqrt(dx * dx + dy * dy)
			return approx_magnitude(dx, dy)
		end,
		isWithin = function(self, other, value)
            return self:taxiDist(other) <= value
			-- return self:taxiDist(other) <= value and
			-- 	self:eucDist(other) <= value
		end,
		isOnScreen = function(self, extra)
			if extra == nil then extra = 0 end

			return extra <= self.x and self.x <= 128 - extra
				and extra <= self.y and self.y <= 128 - extra
		end,
		length = function(self)
			return self:eucDist(vec2(0, 0))
		end,
		angle = function(self)
			return atan2(self.x, self.y)
		end
	}

	setmetatable(ret, metaTable)

	return ret
end

q={}for i=0,1,.05do
for j=0,1,.05do
c=sin(i)add(q,{x=c*cos(j),y=sin(j)*c,z=cos(i)})end
end
color(7)s=.0125

function drawGlobe()
color(1)
--globe
for i=2,881do
f=q[i-441]
if(i<442)f=q[i*21%#q+i/21\1]x=f.x-f.z*s z=f.z+x*s y=f.y-z*s f.z=z+y*s x=x-y*s f.x=x f.y=y+x*s
line(f.x*50+63,f.y*50+63)end
line()
-- flip()

-- goto _z
end

function hasAnimation()
	return gs.currentAnimation != nil and costatus(gs.currentAnimation) != 'dead'
end

function acceptInput()

end

function _update()
	if gs.isGameOver then
		if gs.endTime == nil then
			gs.endTime = time()
		end
		-- Restart
		if not gs:shouldDelayRestart() then
			if btnp(dirs.x) then
				_init()
			end
		end
		return
	end

	if hasAnimation() then
		local active, exception = coresume(gs.currentAnimation)
		if exception then
			stop(trace(gs.currentAnimation, exception))
		end

		return
	end

	acceptInput()

    for asteroid in all(gs.asteroids) do
   		asteroid:update()
        if asteroid.pos.y > 150 then
            del(gs.asteroids, asteroid)
        end
   	end
    for bullet in all(gs.bullets) do
        bullet:update()
        for asteroid in all(gs.asteroids) do
            local collidedNode = asteroid:checkCollisionWithBullet(bullet)
            if collidedNode then
                del(gs.bullets, bullet)
                if asteroid.isPrime then
                    gs.score += asteroid.number
                    del(gs.asteroids, asteroid)
                    sfx(2)
                else
                    asteroid:split()
                    sfx(1)
                    end
                break
            end
        end
        if bullet.pos.x < 0 or bullet.pos.x > 128 or bullet.pos.y < 0 or bullet.pos.y > 128 then
            del(gs.bullets, bullet)
        end
    end

    gs.player:update()

    if #gs.asteroids < time()/20+1 then
        spawnWave()
    end

    if gs:getElapsed() >= 120 then
        gs.isGameOver = true
    end
end

function spawnWave()
    for i=1,4 do
        local pos = vec2(rndrange(30, 128-30), rndrange(-90, -20))
        local vel = vec2(0, 15)
        -- local factor_info = {{2, 2}, 4}  -- This is a placeholder. Replace with actual factor_info
        local factor_info = calcNumber()
        local asteroid = makeAsteroid(factor_info, pos, vel)
        add(gs.asteroids, asteroid)
    end
end

debugDraw = function()

end

function drawGameOverWin()

end



function drawGameOverLose()
	color(7)
    print(' time\'s up! final score: ' .. gs.score)
	if not gs:shouldDelayRestart() then
		print('\n press ❎ to play again')
	end
end

function _draw()
    -- if true then return end
	cls(0)
	if gs.isGameOver then
		if gs.isDrawGameOver then
			if gs.gameOverState == gameOverWin then
				drawGameOverWin()
			else
				drawGameOverLose()
			end
			return
		else
			gs.isDrawGameOver = true
		end
	end


    drawGlobe()

    for asteroid in all(gs.asteroids) do
   		asteroid:draw()
   	end

    for bullet in all(gs.bullets) do
        bullet:draw()
    end

    gs.player:draw()

    debugDraw()

    -- Draw countdown timer and score on the same line
    local countdown = (120 - gs:getElapsed())\1
    rectfill(0,0,128,7,1)
    print("\ntime left: "..countdown.."      score: "..gs.score, 1, -5, 9)
	-- Draw
end

__gfx__
00000000000000066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000066000066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000060000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000655000005500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700006605500005666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060000550550006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060000055500006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
19991999199919991111191119991999199911111111191119991111111111111111111111111199119911991999199911111111191911111111111111111111
11911191199919111111191119111911119111911111191119191111111111111111111111111911191119191919191111911111191911111111111111111111
11911191191919911111191119911991119111111111199919191111111111111111111111111999191119191991199111111111199911111111111111111111
11911191191919111111191119111911119111911111191919191111111111111111111111111119191119191919191111911111111911111111111111111111
11911999191919991111199919991911119111111111199919991111111111111111111111111991119919911919199911111111111911111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
00000000000000000000000000000000000000000000080008000000000000888880000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000080008000000000008888888000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000080008000000000088888888800000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000080008000000000888888888880000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000080008000000008888008808888000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000008888808808888000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000111118888808800088111000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000011111111008888808808088111111100000088888880000000000000000000000000000000000000
00000000000000000000000000000000000000000000001111100000018888000800088011000011008888888888800000000000000000000000000000000000
00000000000000000000000000000000000000000000110100010000010888888888881100110001188888888888880000000000000000000000000000000000
00000000000000000000000000000000000000000111000100001000111188888888810011111110888888888888888000000000000000000000000000000000
00000000000000000000000000000000000000011100001000000111100008888888010000000118888888888888888800000000000000000000000000000000
00000000000000000000000000000000000001110000001001111011011110888880001000000088888888888888888880000000000000000000000000000000
00000000000000000000000000000000000111000000011111100010000001111000001000000088888888888888888880000000000000000000000000000000
00000000000000000000000000000000001111000001101110000011000000100110000100001888888888888888888888000000000000000000000000000000
00000000000000000000000000000000011011000110011000000101000001000001110101110888888880888000888888000000000000000000000000000000
00000000000000000000000000000000100001111001101000000100100001000000001110000888888880888080888888000000000000000000000000000000
00000000000000000000000000000011000001100110001000000100100010000000011111110888888880008000888888000000000000000000000000000000
00000000000000000000000000000110000010111000000100001000010101111111100011001888888880808880888888000000000000000000000000000000
00000000000000000000000000001100000100101000000100001000011110000001000001000888888880008880888888000000000000000000000000000000
00000000000000000000000000011000011011011000000100010001101000000110000001100888888888888888888888100000000000000000000000000000
00000000000000000000000000110000110100001100000100111110011000001000000001010088888888888888888881010000000000000000000000000000
00000000000000000000000001011101101000000110001111011011100100010000000001011188888888888888888881101000000000000000000000000000
00000000000000000000000011000111010006666610110101110001011101100000000001101008888888888888888801111100000000000000000000000000
00000000000000000000000111002222210065555561000110010001000110000000001110100100888888888888888110110110000000000000000000000000
00000000000000000000000101022777221655555556011100100010000111000001110000100100088888888888880001110011000000000000000000000000
00000000000000000000001100277777776555555555600010100010001001100110000000100010008888888888800000111001100000000000000000000000
00000000000000000000011002277000765550055005560010100100010001011000000000010010000088888881000000101000010000000000000000000000
00000000000000000000011002777770765555055505560010100100100001110000000000010010000000010000100000101100010000000000000000000000
00000000000000000000110002777770765555055505561010101001000110101000000011111111000000010000100000100110001000000000000000000000
00000000000000000001100002777770765555055505561110111010011000011011111111111111111111110000010000100110001000000000000000000000
00000000000000000001111112277770765550005000561111110100100000111111111100010001000001111111111001000011001100000000000000000000
00000000000000000011100011277777776555555555670111111011000111111000000000010001000000011100010111100010101100000000000000000000
00000000000000000111000011022777226655555556671111111101111110801180000000001001000000010011010001011101010100000000000000000000
00000000000000000110000101002222266665555566671111111111111000801180000000001000100000010000110001000011001110000000000000000000
00000000000000001010001010000000766666666666711111111111111111811181000000001000100000100000011101000001100110000000000000000000
00000000000000001010010010000000776666666667711111111110000000801181111110001000100000100000010011000001010110000000000000000000
00000000000000001110010010000011177666666677101111111011100000801180000011111100100000100000010001100001001111000000000000000000
00000000000000010100100100111101107766666770010111111100011000011100000000001011110000100000010010010001001011000000000000000000
00000000000000010101000111000001000177777000101111101110000111010010000000001000101110100000010010001001001001100000000000000000
00000000000000010111011100000010000111000011010111101101100000111010000000001001000001111000010010000101010001100000000000000000
00000000000000010111100100000110011010100100011101010110010000010111000000000101000000100111010100000101010001100000000000000000
00000000000000011111000100000100100010011000111001010011001000100001100000000101000001000000110100000010110000110000000000000000
00000000000000101110100010001011000001111001101010010011000110100001011100000110000001000000011100000001100000110000000000000000
00000000000000101100010010011100000001000111010010001001100001000000100011111111100001000000010111000000100000110000000000000000
00000000000000111100001010010000000010100010010010001000110010100001111110110100011111000000101000110001110000110000000000000000
00000000000000111100000111100000000100010101100010001000111100011110100000001100000001110000101000001101110000101000000000000000
00000000000001101100000010100000001000001100100010001000011000011100010000000111000001001100101000000011101000101000000000000000
00000000000001101100000111000000010000011111010010000101101001100010010000001100110010000011110000000010101000011000000000000000
00000000000001001000001001110000100000010001111010011110001110000001010000001100001010000001110000000100110100011000000000000000
00000000000001011000010011001001100000110001001111100100001110000000110000010100000110000001101000001101001100011000000000000000
00000000000001111000100010100111000000100001000011000010010010000000011000010100000011000001100100001001000110111000000000000000
00000000000001111001000010100111000001000010000011100011100011000000001100100100000010110001000110011001000011111000000000000000
00000000000001111010000100111100100010000010000010110011000001100000001010100100000100001111000011010010000001111000000000000000
00000000000001111100000100011000011010000010000010011110000000100000001001000100000100000010000001110010000001011000000000000000
00000000000001111000000100111000000100000010000010001101000000010000000110100100000100000111100001100010000011011000000000000000
00000000000001111100000100101100001111000010000010001111000000011000000100010100000100000100010011110010000101111000000000000000
00000000000001111100001001100100001100110100000010011011000000001100011100001100000100001100001110010100001001111000000000000000
00000000000001110110001001000010011000001100000010010001100000000100100100000100001000011000001110011100010001101000000000000000
00000000000001110011001011000001011000000110000010110000110000000111000010011111001000011000011001001100100001101000000000000000
00000000000001110001110010000000101000000101000010100000101100000111000011100101111000110000010000111001000001001000000000000000
00000000000001110001010100000000111000000100110011000000100110011001001110000100101111110000100000001110000001001000000000000000
00000000000001110000111100000001010110001000001111000000100011100001110001000100010011100001000000010100000001011000000000000000
00000000000001010000111011000001010001101000000011000000010110100001110001000100011011110010000000011110000011010000000000000000
00000000000000110000011000110001010000011111000010110111111000010110110001000100100110010100000000100101000011110000000000000000
00000000000000110000010000001110010000001000111111111100010000001000011001000100101110001000000011100100100011110000000000000000
00000000000000110000011000000011100000001000000110000011101000001100001100100101011101010100001101000010010011010000000000000000
00000000000000110000110100000010110000001000000110000000011000010011001100101001111001100100010010000010001111010000000000000000
00000000000000010000110010000010101110011000001010000000001110010000100110101001010010010011100010000010011110100000000000000000
00000000000000011000101001000100100001111000001001000000000101110000010011011010100100010110000100000011101110100000000000000000
00000000000000011001001001000100100000011111010001000000000100101110001111011111011000111010001000000110001010100000000000000000
00000000000000001101001000100100100000011000111101000000000100100001110011111111100111000110001001111010010010100000000000000000
00000000000000001111001000011000100000010000010011111000000011000000001101011111011000000010011110000100100111000000000000000000
00000000000000000110101000001100100000010000010001000111111011000000000011111111100111111111110000000100100101000000000000000000
00000000000000000110011000001111100000010000010001000000000111111111111111111111111000000010100000000101000101000000000000000000
00000000000000000011001100001001110000110000001001000000000001000000111111111111100000000011010000001010000110000000000000000000
00000000000000000011101011111000111100110000001001000000000001000011111011111111011110000110001000001100001110000000000000000000
00000000000000000001010100001110100111110000001000100000000001111110001101101110100001111100000100001100011100000000000000000000
00000000000000000001101100001001111111111100001000100011111111110000011010110101010000011111111100011111111000000000000000000000
00000000000000000000101010010000010000111111111111111111111001110001100101010111001000101000000111111000011000000000000000000000
00000000000000000000100110010000010000110000001011111000000000110111001001010101100111001000000001110000110000000000000000000000
00000000000000000000010010010000001000110000000100100000000000111100010010010100100111010000000000100001100000000000000000000000
00000000000000000000010001010000001000110000000100010000000001111000100010010100111000110000000001010001100000000000000000000000
00000000000000000000001001110000000100110000000010010000000111011101000100010100011001011100000111010011000000000000000000000000
00000000000000000000000110110000000100110000000010010000111000001110000100010011101010000111001110001010000000000000000000000000
00000000000000000000000011111100000010010000000010010111000000000110001000100110001100000001110110001110000000000000000000000000
00000000000000000000000001111011000010010000000001011100000000011011001000111010110110000000111100001100000000000000000000000000
00000000000000000000000001011111110001010001111111101000000000100001111101100111000010000001011011001000000000000000000000000000
00000000000000000000000000101100011111111110000000101000000001000001100111111010000011000110110000110000000000000000000000000000
00000000000000000000000000010100000011110000000000011000000110000001111000100010000001101001100001100000000000000000000000000000
00000000000000000000000000001110000000111110000000010100001000000111100001000010000001010010000011000000000000000000000000000000
00000000000000000000000000000111000000001001111111001100011111111010010001000010000000110100000110000000000000000000000000000000
00000000000000000000000000000011100000001100000000111111100000000100010010000001000011011000001100000000000000000000000000000000
00000000000000000000000000000001110000000100000000000111000000001000001010000001001101111100110000000000000000000000000000000000
00000000000000000000000000000000011100000110000001111010110000001000001010000001110110001101100000000000000000000000000000000000
00000000000000000000000000000000001111000011001110000001001110010000000100000011011000001111000000000000000000000000000000000000
00000000000000000000000000000000000011111111110000000001000001110000000100001111100000001110000000000000000000000000000000000000
00000000000000000000000000000000000001101101011000000000100001001111001011111001000000111000000000000000000000000000000000000000
00000000000000000000000000000000000000011011111110000000100110000000111111000001000011100000800000000800800000000000000000000000
00000000000000000000000000000000000000000110100111111100011001111111110001000010001110000008222222222228280000000000000000000000
00000000000000000000000000000000000000000001111000110011111110000000100000100010110000000002882822800820820000000000000000000000
00000000000000000000000000000000000000000000011100001101101000000000100000011111000000000020002008280020002200000000000000000000
00000000000000000000000000000000000000000000000111111111111110000001011111111100000000000200020002822002000020000000000000000000
00000000000000000000000000000000000000000000000000001111111001111111111110000000000000000200020020220200200002000000000000000000
00000000000000000000000000000000000000000000000000000000000111111100000000000000000000002000020200220022820000228000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000820000282000222008228000082800000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000008280000228002282800282800002000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000280002828002008000002000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000020008002008022002002000020000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000020082802082882002020000020000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002008200208228002020000020000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000200200280080020000020000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000020020822828020000800000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200002828280080800008280000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000008280000280000008282220800000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000802222280022220220000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222280222000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080228000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__sfx__
000100003b35039350363503475032750307502e7502b750297502675023750235000b20007200062000520003200022000120001200000000000000000000000000000000000000000000000000000000000000
00020000010541325514045142451203515235110351622510025172250e0250a2250702508225050250621503015042150400503205010050760506605066050560504605046050360502605016050160501605
000100000c1500e0511105114051170511705014051120510f0510c15100100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100
010200280c31500000000000000000000000000f2250000000000000000c3000c415000000000000000000000c3000000000000000000c30000000000000741500000000000c2150000000000000000c30000000
010300280000000000246250000000000000000000000000246150000000000000000c30018625000000000018000180002430018000180001800024300180001800018000000000000000000000000000000000
011000010017000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01090004180701a07015070160700c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c000000000000000000000000000000000
0109000418070160701307011070295052650529505265052d505295052950526505225051f5051d505215052e5052b50528505245052d5052d5052850528505265052e5052b5052850524505215051d50521505
0114000020734200351c7341c0351973419535157343952520734200351c7341c0351953219035147341503121734210351c7341c0261973419035237341703521734395251c7341c03519734195351773717035
011400000c043090552072409055246151972315555090550c053090651972309565207242461509065155650c053060652072406065246151672306065125650c05306065167230656520724246150606515555
011400000c053021651e7240206524615197450e7650c05302165020651e7341e7350256524615020650e56501165010651e7240c05324615167230b0450d0650c05301165197440b56520724246150106515555
0114000020724200251c7241c02525742287421572439525207242a7422c7412c7322c72219025147242a74228742287451c7341e7421e7421e735237241702521724395251c7341c03519734195351773617035
0014000020724200251c7241c02525742287421572439525207242a7422c7412c7322c72219025147242f7422d7422d7452d734217422174221735237241702521724395251c7341c03519734195351773617035
0116002006055061550d055061550d547061550d055061550d055060550615501155065470d15504055041550b055041550b547041550b055041550b0550b155040550b155045460b1550b055041550b0550b155
010b00201e4421e4321f4261e4261c4321c4221e4421e4321e4221e4221f4261e4261c4421c4321c4221c4221c4221c4221c4221c4221c4221c4221c4221c4221c4221c4221c4221c42510125101051012510105
011600001e4401e4321e4221e4250653500505065351a0241a025065351a0250653500505065351902419025045351702404535005050453500505045351e0241e025045351e0240453504535005050453504535
010b00201e4421e4361f4261e4261c4421c4421a4451c4451e4451f44521445234452644528445254422543219442194322544225432264362543623442234322144221432234472343625440234402144520445
01160000190241902506535135000653500505065351a0241a025065351a0250653506404065351902419025045351702404535005050453500505045351e0241e025045351e0240453504535005050453504535
010e000005455054553f52511435111250f4350c43511125034550345511125182551b255182551d2551112501455014552025511125111252025511125202550345520255224552325522455202461d4551b255
010e00000c0530c4451112518455306251425511255054450c0530a4353f52513435306251343518435054450c053111251b4353f525306251b4353f5251b4350c0331b4451d2451e445306251d2451844516245
010e00000145520255224552325522445202551d45503455034050345503455182551b455182551d455111250045520255224552325522455202461d4551b255014550145511125182551b455182551d45511125
010e00000c0531b4451d2451e445306251d245184450c05317200131253f52513435306251343518435014450c0431b4451d2451e445306251d245184451624511125111253f5251343530625134351843500455
010e0000004550045520455111251d125204551d1252912501455014552c455111251d1252c4551d12529125034552c2552e4552f2552e4552c2552945503455044552c2552e4552f2552e4552c246294551b221
010e00000c0530c0531b4551b225306251b4551b2250f4250c0530c05327455272253062527455272251b4250c0531b4451d2451e445306251d245184450c0530c0531b4451d2451e445306251d2451844500455
010d00000c0530445504255134453f6150445513245044550c0531344513245044553f6150445513245134450c0530445504255134453f6150445513245044550c0531344513245044553f615044551324513445
010d000028555234452d2352b5552a4452b2352f55532245395303725536540374353b2503954537430342553654034235325552f2402d5352b2502a4452b530284552624623530214551f24023535284302a245
010d00002b5552a4452823523555214451f2351e5551c4452b235235552a445232352d5552b4452a2352b555284452a235285552644523235215551f4451c2351a555174451e2351a5551c4451e2351f55523235
010d00000c0530045500255104453f6150045510245004550c0530044500245104553f6150045510245104450c0530045500255104453f6150045510245004550c0531044510245004553f615004551024500455
010d00000c0530245502255124453f6150245512245024550c0531244512245024553f6150245502255124450c0530245502255124453f6150245512245024550c0530244512245024553f615124550224512445
010d00002b5552a45528255235552b5452a44528545235452b5352a03528535235352b0352a03528735237352b0352a03528735237351f7251e7251c725177251f7151e7151c715177151371512715107150b715
010c00200c0530c235004303a324004453c3253c3240c0533c6150c0530044000440002353e5253e5250c1530c0530f244034451b323034453702437522370253c6153e5250334003440032351b3230c0531b323
010c00200c05312235064303a324064453c3253c3240c0533c6150c0530644006440062353e5253e5250c1530c05311244054451b323054453a0242e5223a0253c6153e52503345054451323605436033451b323
010c00202202524225244202432422425243252432422325223252402522420242242222524425245252422522325222242442524326224252402424522220252452524524223252442522227244262432522325
010c0000224002b4202e42030420304203042033420304203042030222294202b2202e420302202b420272202a4202a4222a42227420274202742025421274212742027420274202722027422272222742227222
010c00002a4202a4222a422274202742027422272222742527400254202a2202e4202b2202a426252202a4202742027422274222442024222244222242124421244202442024420244202422024422182210c421
011100000c3430035500345003353c6150a3300a4320a3320c3430335503345033353c6151333013432133320c3430735507345073353c6151633016432163320c3430335503345033353c6151b3301b4321b332
01110000162251b425222253751227425375122b5112e2251b4352b2402944027240224471f440244422443224422244253a512222253a523274252e2253a425162351b4352e4302e23222431222302243222232
011100000c3430535505345053353c6150f3301f4260f3320c3430335503345033353c6151332616325133320c3430735507345073353c6151633026426163320c3430335503345033353c6150f3261b3150f322
011100001d22522425272253f51227425375122b5112e225322403323133222304403043030422375112e44237442372322c2412c2322c2222c4202c4153a425162351b4352b4402b4322b220224402243222222
011100001f2401f4301f2201f21527425375122b5112e225162251b5112e2253a5122b425375122b5112e225162251b425225133021033410375223341027221162251b425222253751227425373112b3112e325
01110000182251f511242233c5122b425335122b5112e225162251b5112e2253a5122b425375122b5112e225162251b425225133021033410375223341027221162251b425222253751227425373112b3112e325
011100000f22522425272253f51227425375122b5112e2252724027232272222444024430244222b511224422b4422b23220241202322023220420204153a425162351b4351f4401f4321f2201d4401d4321d222
007800000c8410c8410c8400c8400c8400c8400c8400c8400c8400c8400c8400c8400c8400c8400c8400c84018841188401884018840188401884018840188402483124830248302483024830248302483024830
01780000269542694026930185351870007525075240752507534000002495424940249301d5241d7000c5250c5242952500000000002b525000001d5241d5250a5440a5450a5440a5201a7341a7350a0350a024
017800000072400735007440075500744007350072400715007340072500000057440575505744057350572405735057440575503744037350372403735037440375503744037350372403735037440373503704
017800000a0041f734219442194224a5424a5224a45265351a5341a5350000026934269421ba541ba501ba550c5340c5450c5540c555000001f9541f9501f955225251f5341f52522a2022a3222a452b7342b725
0110002005b4008b3009b200ab3009b4008b3006b2002b3001b4006b3006b2003b3002b4003b3005b2007b3008b4009b300ab200ab300ab4009b3008b2007b3005b4003b3002b2002b3002b4002b3004b2007b30
0118042000c260cc260cc2600c2600c2600c260cc260cc260cc2600c2600c260cc260cc260cc2600c2600c260cc2600c2600c2600c260cc260cc260cc2600c260cc2600c260cc260cc2600c260cc260cc2605c26
012000200cb200fb3010b4011b5010b400fb300db2009b3008b400db500db400ab3009b200ab300cb400eb500fb4010b3011b2011b3011b4010b500fb400eb300cb200ab3015b4015b5015b4015b300bb200eb30
012c002000000000000000000000000000000000000000001372413720137201372015724157201572015722137241872418720187201872018720187201872018725187021a7241c7211c7201c7201c7201c720
012800001c7201f7241f7201f7201f7201f720157241572015720157201572015720157201572215725000001c7241c7201c7201c7201c7201f7241f7201f7201f7201f722157241572015720157201572015720
012800001572015725000001f7241c7241c7201c7201c7201c7201c72215724137211372013720137201372013720137221872418720187201872018720187201872018720187201872218725187001870018705
012000000dd650dd550dd450dd351075510745107351072500c5517d5517d4517d3517d2517d2510755107450dd650dd550dd450dd351075510745107351072500c5417d5517d4517d3517d2517d250dd250dd35
011d0c201072519d5519d4519d3519d251005510045100351002517d550f7350f7350f7250f72510725107251072519d3519d3519d2519d250b0250b0350b7350b0250b7250b72517d3517d350f7350f7350f725
0120000012d6512d5512d4512d351575515745157351572500c5510d5510d4510d3510d2510d25157551574512d6512d5512d4512d35157551574500c54157351572519d5519d4519d3519d2519d250dd250dd35
011d0c20107251ed351ed351ed351ed251503515035150251502517d35147351472514725147251572515725157251ed351ed351ed251ed2515025150351573515025157251572519d3519d350f7350f7350f725
0120000019d5519d450dd3501d551405014040147321472223d3523d450bd350bd551505015040157321572219d5519d450dd3501d551705019040197321972223d3523d450bd350bd551c0501e0401e7321e722
012000001ed551ed4512d3506d552105021040217322172228d4528d3528d2520050200521e0401e7321e7221ed551ed4512d3506d552105021040257322572228d5528d4528d3528d251c0401e0301e7221e722
0112000024e4524e3521f251ff351ff451de3524f2524f3518e451de351fe251d73018e251de351fe451d7321ff4521f3524f252973029e252be352ee4524e3524e2524e3521f451ff351ff251de352473224f35
0112000024e2524e35219451ff352192524e3524e4524f3526f2526f351fe451d73232f4532f352be25297322bf252bf352df253573235e2537e353ae4530e3530e2530e352df452bf352bf2529e253073230f35
011200002de252de352af4528f3528f2526e352df452df3521e2526e3528e452673221e3526e2528e352673228f252af352df253273232e3534e2537e352de252de352de252af3528f2528f3526e252d7322df35
011200000a0550a0350a0250a0550a0350a0250a0550a0350a0250a0550a035050250a0550a0350a0250a0550a035050250a0550a0350a0250a0550a035050250a0550a035050250a0550a035050250a0550a035
011200000505505035050250505505035050250505505035050250505505035000250505505035050250505505035000250505505035050250505505035000250505505035000250505505035000250505505035
011200000705507035070250705507035070250705507035070250705507035020250705507035070250705502035020550205502035020250205502035090250205502035090250205502035090250205502035
__music__
00 08094344
00 080a4344
00 0b094344
00 0c0a4344
00 0b094344
02 0c0a4344
01 12134344
00 12134344
00 12134344
00 12134344
00 14154344
00 14154344
02 16174344
01 18424344
00 1b424344
00 1c424344
00 18424344
00 181a4344
00 1b1a4344
00 1c194344
02 181d4344
00 1e424344
00 1f424344
01 1e204344
00 1f204344
00 1e204344
00 1f204344
00 1e214344
00 1f224344
00 1e214344
02 1f224344
00 23424344
00 23424344
01 23244344
00 23244344
00 25294344
00 25264344
00 23274344
02 23284344
03 2a2b2c2d
01 2e2f3031
00 2e2f3032
02 2e2f3033
01 34354344
00 34354344
00 36374344
00 34384344
00 34384344
02 36394344
00 0d117f44
01 0d117f44
00 0d0e7f44
00 0d0e7f44
00 0d107f44
00 0d107f44
02 0d0f7f44
01 3d3a4344
00 3e3a4344
00 3d3b4344
00 3e3a4344
00 3f3c5344
02 3f3c5344
00 7e7f5344
00 7e7f5344

__meta:cart_info_start__
cart_type: game
# Embed: 750 x 680
game_name: Prime Time
# Leave blank to use game-name
game_slug: 
jam_info:
  - jam_name: TriJam
    jam_number: 251
    jam_url: null
    jam_theme: 'Remove Limits'
tagline: Navigate through the quantum realm and factor numbers!
time_left: ''
develop_time: '2:57:05'
description: |
  Quantum computers remove the limits of classical computers.
  You are in control of Shor's algorithm. Your mission is to shoot numbers to factor them. 
  Rack up points by shooting as many prime numbers as you can before the time runs out.
controls:
  - inputs: [X]
    desc: Shoot
  - inputs: [ARROW_KEYS]
    desc: Move
hints: ''
acknowledgements: |
  * Music is from [Gruber](https://www.lexaloffle.com/bbs/?uid=11292)'s [Pico-8 Tunes Vol. 2](https://www.lexaloffle.com/bbs/?tid=33675), Track 3 - Like Clockwork  
  Licensed under [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)
  * Sound effects are from [Gruber](https://www.lexaloffle.com/bbs/?uid=11292)'s [Pico-8 SFX Pack](https://www.lexaloffle.com/bbs/?pid=64837)  
  Licensed under [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)
  * Background animation is from [Munro](https://www.lexaloffle.com/bbs/?uid=37618)'s [Tweetcarts](https://www.lexaloffle.com/bbs/?tid=39199), Globe  
  Licensed under [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)
  * "Algorithm" animation is from [Munro](https://www.lexaloffle.com/bbs/?uid=37618)'s [Tweetcarts](https://www.lexaloffle.com/bbs/?tid=39199), Gyroscopic (with modifications to color and size)  
  Licensed under [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)
  * Game loosely inspired by [Shor's Algorithm](https://en.wikipedia.org/wiki/Shor%27s_algorithm)

to_do: []
version: 0.1.0
img_alt: An algorithm shooting numbers in a quantum computer
about_extra: ''
number_players: [1]
__meta:cart_info_end__


