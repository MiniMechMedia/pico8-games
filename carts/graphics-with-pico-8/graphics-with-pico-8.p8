pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--graphics with pico-8           v0.1.0
--mini mech media




DEBUG = false


function matmul(mat1, mat2)
    local result = {}
    for i=1, #mat1 do
        result[i] = {}
        for j=1, #mat2[1] do
            local sum = 0
            for k=1, #mat1[1] do
                sum = sum + mat1[i][k] * mat2[k][j]
            end
            result[i][j] = sum
        end
    end
    return result
end



-- TODO be smarter...
function vecmul(matrix, vector)
	vector = {vector.x, vector.y, vector.z}
    local result = {0, 0, 0}
    for i=1, #matrix do
        for j=1, #matrix[i] do
            result[i] = result[i] + matrix[i][j] * vector[j]
        end
    end
    -- return result
	return {
		x=result[1],
		y=result[2],
		z=result[3]
	}
end

function matadd(mat1, mat2)
    local result = {}
    for i=1, #mat1 do
        result[i] = {}
        for j=1, #mat1[1] do
            result[i][j] = mat1[i][j] + mat2[i][j]
        end
    end
    return result
end

SCALE = 32
OFFSET = 64

unit_square_mesh = {
	{
        {x = -1, y =  1, z = 1},
        {x = -1, y = -1, z = 1},
        {x =  1, y = -1, z = 1},
        {x =  1, y =  1, z = 1},
		normal = {x=0,y=0,z=1},
    }
}

unit_cube_mesh = {
	{
		{z = -1, y =  1, x =  1},
		{z = -1, y = -1, x =  1},
		{z =  1, y = -1, x =  1},
		{z =  1, y =  1, x =  1},
		normal = {x=1,y=0,z=0},
	},
	{
		{x = -1, z =  1, y =  -1},
		{x = -1, z = -1, y =  -1},
		{x =  1, z = -1, y =  -1},
		{x =  1, z =  1, y =  -1},
		normal = {x=0,y=-1,z=0},
	},
	{
		{x = -1, y =  1, z =  1},
		{x = -1, y = -1, z =  1},
		{x =  1, y = -1, z =  1},
		{x =  1, y =  1, z =  1},
		normal = {x=0,y=0,z=1},
	},

	{
		{z = -1, y =  1, x =  -1},
		{z = -1, y = -1, x =  -1},
		{z =  1, y = -1, x =  -1},
		{z =  1, y =  1, x =  -1},
		normal = {x=-1,y=0,z=0},
	},

	
	{
		{x = -1, z =  1, y =  1},
		{x = -1, z = -1, y =  1},
		{x =  1, z = -1, y =  1},
		{x =  1, z =  1, y =  1},
		normal = {x=0,y=1,z=0},
	},


	{
		{x = -1, y =  1, z =  -1},
		{x = -1, y = -1, z =  -1},
		{x =  1, y = -1, z =  -1},
		{x =  1, y =  1, z =  -1},
		normal = {x=0,y=0,z=-1},
	},
} 

function emptyinit()
end

startTime = t()

function time()
	return t() - startTime
end

function count_elements(tbl)
	local string = ''
	local count = 0
	for el in all(tbl) do
		count += 1
		local myadd = tostr(el)
		if (myadd == '[table]') myadd = 't'
		-- if (myadd == '[table]') assert(false)
		string = myadd .. ',' .. string
	end
	return string
end

-- function sgn(a)
-- 	if a <= 0 then return -1 else return 1 end
-- end

function fill_polygon(face, obj, col)
	local start_x, start_y, start_z = obj:objToWorld(face[1])
	-- calculate basis vectors
	local ux, uy, uz = obj:objToWorld(face[2])
	ux -= start_x
	uy -= start_y
	uz -= start_z
	
	local vx, vy, vz = obj:objToWorld(face[4])
	vx -= start_x
	vy -= start_y
	vz -= start_z

	for i = 0,1,0.03 do
		for j = 0,1,0.03 do
			local surface_vector = {
				x = start_x + ux*i + vx*j,
				y = start_y + uy*i + vy*j,
				z = start_z + uz*i + vz*j,
			}
			local sx, sy = obj:worldToScreen(surface_vector)
			rectfill(sx, sy, sx+1, sy+1, col)
		end
	end
end

function sort(a, key, limit)
    for i=1,#a do
        local j = i
        while j > 1 and key(a[j-1]) < key(a[j]) do
            a[j],a[j-1] = a[j-1],a[j]
            j = j - 1
        end
    end

	if limit then
		local ret = {}
		for i = 1, limit do
			add(ret, a[i])
		end
		return ret
	end

	return a
end

function sort_objects(objects)
	return all(sort(objects, function(obj)
		return obj.pos.z
	end))
end

function sort_faces(faces, obj)
	return all(sort(faces, function(face) 
		local _,_,z=obj:objToWorld(face.center)
		return z
	end))
end

function gameObject(mesh, transform)
	-- We're cheating a little bit here...
	-- TODO comment better
	if type(mesh[1].x) == 'number' then
		if mesh[#mesh] != mesh[1] then
			add(mesh, mesh[1])
		end
	else
		for face in all(mesh) do
			local sum_x = 0
			local sum_y = 0
			local sum_z = 0
			local count = 0
			for vertex in all(face) do
				sum_x += vertex.x
				sum_y += vertex.y
				sum_z += vertex.z or 0
				count += 1
			end
			face.center = {x=sum_x/count, y=sum_y/count, z=sum_z/count}
			-- if face[#face] != face[1] then
			if #face == 4 then	-- TODO???
				add(face, face[1])
			end
		end
	end
	transform = transform or {}
	return {
		mesh = mesh,
		scale = transform.scale or 1,
		pos = transform.pos or {x=0,y=0,z=0},
		rot = transform.rot or {x=0,y=0,z=0},
		SCALE = transform.SCALE or 32,
		OFFSET = transform.OFFSET or 64,
		-- Only for 3d game objects
		objToScreen = function(self, obj_point)
			local world_x, world_y, world_z = self:objToWorld(obj_point)

			local SCALE = 32
			local OFFSET = 64
			
			local screen_x = world_x / world_z*3 * self.SCALE + self.OFFSET
			local screen_y = world_y / world_z*3 * self.SCALE + self.OFFSET

			return screen_x, screen_y
		end,
		worldToScreen = function(self, world_point)
			local world_x, world_y, world_z = world_point.x, world_point.y, world_point.z
			local SCALE = 32
			local OFFSET = 64
			
			local screen_x = world_x / world_z*3 * self.SCALE + self.OFFSET
			local screen_y = world_y / world_z*3 * self.SCALE + self.OFFSET

			return screen_x, screen_y
		end,
		objToRotated = function(self, obj_point)
			local rotated = nil
			-- local rotated = rotate(obj_point, self.rot)
			if self.rotmat then
				rotated = vecmul(self.rotmat, obj_point)
			else
				rotated = rotate(obj_point, self.rot)
			end
			return rotated
		end,
		objToWorld = function(self, obj_point)
			local rotated = self:objToRotated(obj_point)
			local world_x = rotated.x * self.scale + self.pos.x
			local world_y = rotated.y * self.scale + self.pos.y
			local world_z = rotated.z * self.scale + self.pos.z

			-- print(self.pos.z)
			-- assert(false)

			return world_x, world_y, world_z
		end
	}
end

function get_rotation_matrix(euler_angles)
	alpha, beta, gamma = euler_angles.x, euler_angles.y, euler_angles.z
	yaw = {
		{cos(alpha), -sin(alpha), 0},
		{sin(alpha), cos(alpha), 0},
		{0, 0, 1}
	}

	pitch = {
		{cos(beta), 0, sin(beta)},
		{0, 1, 0},
		{-sin(beta), 0, cos(beta)}
	}

	roll = {
		{1, 0, 0},
		{0, cos(gamma), -sin(gamma)},
		{0, sin(gamma), cos(gamma)}
	}
	
	-- Multiply yaw by pitch, then the result by roll
	local yaw_pitch = matmul(yaw, pitch)
	local rotation_matrix = matmul(yaw_pitch, roll)
	return rotation_matrix
end

function rotate(vector, euler_angles)
	local rotation_matrix = get_rotation_matrix(euler_angles)
	return vecmul(rotation_matrix, vector)
end



function _init()
	poke(0x5f2d, 1)
	-- for name in all({
	-- 	'slide_082_objToScreen',
	-- 	'slide_093_cube_static_rot_persp'
	-- }) do
	-- 	for slide in all(slides) do
	-- 		if slide.name == name then
	-- 			del(slides, slide)
	-- 		end
	-- 	end
	-- end
	
	cartdata('minimechmedia_graphics_with_pico8_v1')
	shown_slide_index = nil
	-- this is referring to saved or whatever
	slide_index = slide_override or dget(0)
	-- slide_index = 12
       slide_index = mid(1, slide_index, #slides)
	-- slide_index_executing = dget(0)
	-- slide_index_viewing_code = dget(1)
	-- slide_index_executing = mid(1, slide_index_executing, #slides)
	-- slide_index_viewing_code = mid(1, slide_index_viewing_code, #slides)
	inc_slide_index(0, slide_index)
	-- shown_slide_index = slide_index
	set_shown_slide_index(true)
end

function reset_slide()
	pal()
	light_map = nil
	composite_map = nil
end

function post_init()
	-- if slides[shown_slide_index].name == 'slide_023_texture_gouraud' then
	if composite_map != nil then
		extras = {
			-- 0,
		1,2,
		-- 3,
		4,5,6,
			--7,
			8,9,10,11,12,13,14,15}
		for light_map in all({
			light_gray_map,
			dark_gray_map,
			pink_map
		}) do
			for val in all(light_map) do
				if val < 128 then
					del(extras, val)
				end
			end

			for i, val in ipairs(light_map) do
				if val >= 128 then
					local e = extras[1]
					deli(extras, 1)
					light_map[i] = e
					pal(e,val,1)
				end
			end
		end
		return
	end

	if light_map == nil and composite_map == nil then
		return
	end
	-- if light_map == nil then
	-- 	light_map = {}
	-- 	for sub_map in all(composite_map) do
	-- 		for entry in all(sub_map) do
	-- 			add(light_map, entry)
	-- 		end
	-- 	end
	-- end
	local light_maps = {}
	if light_map != nil then
		add(light_maps, light_map)
	elseif composite_map != nil then
		for _, map in ipairs(composite_map) do
			add(light_maps, map)
		end
	end	

    local extras = {
		-- 0,
		1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
	local mapped = {}
	for light_map in all(light_maps) do
		for val in all(light_map) do
			if val < 128 then
				del(extras, val)
			end
		end

		for i, val in ipairs(light_map) do
			if val >= 128 then
				if mapped[val] != nil then
					light_map[i] = mapped[val]
				else
					local e = extras[1]
					deli(extras, 1)
					light_map[i] = e
					pal(e,val,1)
					mapped[val] = e
				end
			end
		end
	end
end

function set_shown_slide_index(suppress_printh)
	local actual = slide_index
	-- if shown_slide_index == actual then
	-- 	return
	-- end
	shown_slide_index = actual
	reset_slide()
	slides[shown_slide_index]:init()
	post_init()
	-- if not suppress_printh and not btn(4) then
	-- 	printh('--reuse-window ' .. slides[shown_slide_index].name .. '.lua')
	-- end
end

function inc_slide_index(amount, absolute)

	local original = slide_index
	slide_index += amount
	slide_index = mid(1, slide_index, #slides)
	if absolute then
		slide_index = absolute
	end
	-- slide_index = 12
	dset(0, slide_index) -- persist slide_index to storage
	if original != slide_index or absolute then
		-- reset_slide()
		-- slides[slide_index]:init()
		if slides[slide_index] and slides[shown_slide_index] then
			
			-- TODO add a flag
			set_shown_slide_index(true)
			-- if btn(4) then
			-- 	-- printh('--reuse-window ' .. slides[slide_index].name .. '.lua')
			-- 	local blah = ''
			-- else
			-- 	printh('--reuse-window --diff ' .. slides[shown_slide_index].name .. '.lua' .. ' ' .. slides[slide_index].name .. '.lua')
			-- end
		end
		-- TODO add an ELSE
		-- if not btn(5) then
		-- 	slide_index = original
		-- end
		-- startTime = t()
	end
end

function _update()
	if (btnp(0)) then
		inc_slide_index(-1)
	end

	if (btnp(1)) then
		inc_slide_index(1)
	end

	if btnp(4) and false then
		DEBUG = not DEBUG
	end

	if btnp(5, 1) then
		-- set_shown_slide_index(1)
		inc_slide_index(1, 1)
	end

	if btnp(5) then
		-- shown_slide_index = slide_index
		set_shown_slide_index()
	end
end

function _draw()
	cls()
	for obj in all(objects) do
		if type(obj.rot) == 'table' then
			obj.rotmat = get_rotation_matrix(obj.rot)
		end
	end
	color(7)
	slides[shown_slide_index]:draw()

	-- TODO if debug

	if DEBUG  then
		color(7)
        print("CPU: " .. stat(1), 5, 5, 7)
        print("Memory: " .. stat(0), 5, 15, 7)
		print(slides[shown_slide_index].name, 0, 118)
    end

	local indicator = '' .. shown_slide_index .. '/' .. #slides
	if shown_slide_index != slide_index then
		local next_name = slides[slide_index].name
		local switch_app = false
		if next_name and next_name[#next_name] == '_' then
			switch_app = true
		end
		indicator ..= ' -> ' .. slide_index .. '/' .. #slides
		if switch_app then
			indicator ..= '*'
		end
	end
	print(indicator, 5, 120, 7)

	spr(8, stat(32), stat(33))
end




-- BEGIN SLIDES
#include slide_001_empty.lua
slide_001_empty = {draw = draw, init=emptyinit, name = 'slide_001_empty'}
#include slide_002_naive_square_.lua
slide_002_naive_square_ = {draw = draw, init=emptyinit, name = 'slide_002_naive_square_'}
#include slide_003_naive_square2.lua
slide_003_naive_square2 = {draw = draw, init=emptyinit, name = 'slide_003_naive_square2'}
#include slide_004_square_world_coords.lua
slide_004_square_world_coords = {draw = draw, init=emptyinit, name = 'slide_004_square_world_coords'}
#include slide_005_naive_transform.lua
slide_005_naive_transform = {draw = draw, init=emptyinit, name = 'slide_005_naive_transform'}
#include slide_006_2d_transform_.lua
slide_006_2d_transform_ = {draw = draw, init=emptyinit, name = 'slide_006_2d_transform_'}
#include slide_007_2d_transform_rot.lua
slide_007_2d_transform_rot = {draw = draw, init=emptyinit, name = 'slide_007_2d_transform_rot'}
#include slide_008_naive_cube_.lua
slide_008_naive_cube_ = {draw = draw, init=emptyinit, name = 'slide_008_naive_cube_'}
#include slide_009_cube_rotation_.lua
slide_009_cube_rotation_ = {draw = draw, init=emptyinit, name = 'slide_009_cube_rotation_'}
#include slide_010_cube_perspective_.lua
slide_010_cube_perspective_ = {draw = draw, init=emptyinit, name = 'slide_010_cube_perspective_'}
#include slide_011_cube_rot_persp.lua
slide_011_cube_rot_persp = {draw = draw, init=emptyinit, name = 'slide_011_cube_rot_persp'}
#include slide_012_klein_bottle.lua
slide_012_klein_bottle = {draw = draw, init=init, name = 'slide_012_klein_bottle'}
#include slide_013_cube_solid_faces_baseline.lua
slide_013_cube_solid_faces_baseline = {draw = draw, init=emptyinit, name = 'slide_013_cube_solid_faces_baseline'}
#include slide_014_cube_solid_faces_one_face.lua
slide_014_cube_solid_faces_one_face = {draw = draw, init=emptyinit, name = 'slide_014_cube_solid_faces_one_face'}
#include slide_015_cube_solid_single_face_filled_.lua
slide_015_cube_solid_single_face_filled_ = {draw = draw, init=init, name = 'slide_015_cube_solid_single_face_filled_'}
#include slide_016_cube_solid_all_faces_solid_static.lua
slide_016_cube_solid_all_faces_solid_static = {draw = draw, init=init, name = 'slide_016_cube_solid_all_faces_solid_static'}
#include slide_017_cube_solid_all_faces_solid_rotating.lua
slide_017_cube_solid_all_faces_solid_rotating = {draw = draw, init=init, name = 'slide_017_cube_solid_all_faces_solid_rotating'}
#include slide_018_solid_depth_sort_.lua
slide_018_solid_depth_sort_ = {draw = draw, init=init, name = 'slide_018_solid_depth_sort_'}
#include slide_019_flat_shading_.lua
slide_019_flat_shading_ = {draw = draw, init=init, name = 'slide_019_flat_shading_'}
#include slide_020_flat_shading_baseline.lua
slide_020_flat_shading_baseline = {draw = draw, init=init, name = 'slide_020_flat_shading_baseline'}
#include slide_021_gouraud_shading_cube_.lua
slide_021_gouraud_shading_cube_ = {draw = draw, init=init, name = 'slide_021_gouraud_shading_cube_'}
#include slide_022_texture_mapping_.lua
slide_022_texture_mapping_ = {draw = draw, init=init, name = 'slide_022_texture_mapping_'}
#include slide_023_texture_gouraud_.lua
slide_023_texture_gouraud_ = {draw = draw, init=init, name = 'slide_023_texture_gouraud_'}
slides = {
slide_001_empty,
slide_002_naive_square_,
slide_003_naive_square2,
slide_004_square_world_coords,
slide_005_naive_transform,
slide_006_2d_transform_,
slide_007_2d_transform_rot,
slide_008_naive_cube_,
slide_009_cube_rotation_,
slide_010_cube_perspective_,
slide_011_cube_rot_persp,
slide_012_klein_bottle,
slide_013_cube_solid_faces_baseline,
slide_014_cube_solid_faces_one_face,
slide_015_cube_solid_single_face_filled_,
slide_016_cube_solid_all_faces_solid_static,
slide_017_cube_solid_all_faces_solid_rotating,
slide_018_solid_depth_sort_,
slide_019_flat_shading_,
slide_020_flat_shading_baseline,
slide_021_gouraud_shading_cube_,
slide_022_texture_mapping_,
slide_023_texture_gouraud_
}
-- END SLIDES

__gfx__
66666666556666666666556666666600000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000
66666666556666666666556666666600000000000000000000000000000000001710000000000000000000000000000000000000000000000000000000000000
66666666556655ee5566556666666600000000000000000000000000000000001771000000000000000000000000000000000000000000000000000000000000
66666666556655ee5566556666666600000000000000000000000000000000001777100000000000000000000000000000000000000000000000000000000000
66666655555555ee5555555566666600000000000000000000000156000000001777710000000000000000000000000000000000000000000000000000000000
66666655555555ee5555555566666600000000000000000000000000000000001771100000000000000000000000000000000000000000000000000000000000
66665555555555ee555555555566660000000000000000000000049e000000000117100000000000000000000000000000000000000000000000000000000000
66665555555555ee5555555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555566666655555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555566666655555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555556666ee6666555555666600000000000000000000000000056700000000000000000000000000000000000000000000000000000000000000000000
66665555556666ee6666555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665555556666eeeeee66665555556600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665555556666eeeeee66665555556600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66eeeeee666666eeeeee66eeeeee6600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66eeeeee666666eeeeee66eeeeee6600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665555556666eeeeee66665555556600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665555556666eeeeee66665555556600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555556666ee6666555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555556666ee6666555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555566666655555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555566666655555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555555555ee5555555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555555555ee5555555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666655555555ee5555555566666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666655555555ee5555555566666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556655ee5566556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556655ee5566556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556666666666556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556666666666556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665555556666ee66ee66665555556600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665555556666ee66ee66665555556600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555556666666666555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555556666666666555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555566666655555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555566666655555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555555555ee5555555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66665555555555ee5555555555666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666655555555ee5555555566666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666655555555ee5555555566666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556655ee5566556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556655ee5566556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556666666666556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666556666666666556666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000066665000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000056666555550000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000005566666555555ggg00000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000005566666665555ggg5llll000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000005566666666655lgg55lllllllg0000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000l6666666666555ll55ggglllllgg00000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000l56666666666llllll5gggllgggllg00gggg0000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000l566666665565lllllllgglllggllgg0gggggggg000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000g5655666665555lllllllggllgggllggggggggggg00000000000000000000000000000000000000000
000000000000000000000000000000000000000000000gg565555555555555llllllgllgggggggggggggggg00000000000000000000000000000000000000000
000000000000000000000000000000000000000000000gg5655555555555555llllllglgggggggggggggggg00000000000000000000000000000000000000000
000000000000000000000000000000000000000000000gg566666655555555555l66lgggggggggggglgggggg0000000000000000000000000000000000000000
00000000000000000000000000000000000000000000ggg5566666665555555555l6655555gggggggggggggg0000000000000000000000000000000000000000
00000000000000000000000000000000000000000000gggl566666665555555566566655555ggggggggglggg0000000000000000000000000000000000000000
00000000000000000000000000000000000000000000g0gl566665555555555556666666555ggggggggggglgg000000000000000000000000000000000000000
00000000000000000000000000000000000000000000g0gl66666555555555666666666665555gggggggggggg000000000000000000000000000000000000000
0000000000000000000000000000000000000000000gg0gl56666ee555555566666eee66666555lgggggggggg000000000000000000000000000000000000000
0000000000000000000000000000000000000000000gg0gl56666eeeeeeeee66666eee666ggg555lggggglllll00000000000000000000000000000000000000
0000000000000000000000000000000000000000000000gl56666eeeeeeeeee66eeeeee66eeg66555lggglllll00000000000000000000000000000000000000
000000000000000000000000000000000000000000000gg5566665555555eee66eeeeeeeeeee66655llgggggll00000000000000000000000000000000000000
000000000000000000000000000000000000000000g00gg55566655555555556666eeeeeeeeeeeg65ggllggg5ll0000000000000000000000000000000000000
000000000000000000000000000000000000000000g00lg5e5666555555555566666eeeeeeeeeee666ggggll55l0000000000000000000000000000000000000
00000000000000000000000000000000000000000gg00l55e5666666655555566666eeeeeeeee66666lggggll550000000000000000000000000000000000000
00000000000000000000000000000000000000000gg00l5e556666666555555555666eeeeeeee66666lllllll555000000000000000000000000000000000000
00000000000000000000000000000000000000000gg00l5e565555555555555555666666ee6666666655lllll555000000000000000000000000000000000000
00000000000000000000000000000000000000000gg0gl5e565555555555555555566666eee66666555555llll55000000000000000000000000000000000000
00000000000000000000000000000000000000000gg0gl5555566655555555555555566666666666555555ll6655500000000000000000000000000000000000
00000000000000000000000000000000000000000gg0gl5655566666665555555555566666666655555555556655500000000000000000000000000000000000
00000000000000000000000000000000000000000g00gl6655666666665555555555555556666655555555555llll00000000000000000000000000000000000
00000000000000000000000000000000000000000g00g5655566666666555555555555555eee555555555555555lll0000000000000000000000000000000000
00000000000000000000000000000000000000000g00ll655666666666666555555555555eee5555555555555666ll0000000000000000000000000000000000
00000000000000000000000000000000000000000g00ll655666666666666555555555555eee5555555555555566660000000000000000000000000000000000
00000000000000000000000000000000000000000g0gll6556666666666665555555555555ee5555555555555566666000000000000000000000000000000000
000000000000000000000000000000000000000000ggll6556666666666666666555555555ee5555555555566666666000000000000000000000000000000000
0000000000000000000000000000000000000000000glg5556666666666666666555666555eee555555555556666666000000000000000000000000000000000
00000000000000000000000000000000000000000g0glg5556666666666666666555666555eee555666556666666666600000000000000000000000000000000
00000000000000000000000000000000000000000g00l55556666666666666666555666555eee555666555666666666600000000000000000000000000000000
00000000000000000000000000000000000000000gg0l555566666666666666665556666666ee555666555666666666600000000000000000000000000000000
00000000000000000000000000000000000000000gg0l55556666666666666666655566666666666666555666666666660000000000000000000000000000000
00000000000000000000000000000000000000000g00gg5566666666666666666655566666666666666655566666666660000000000000000000000000000000
00000000000000000000000000000000000000000g00gg5566666666666666666655566666666666666655566666666660000000000000000000000000000000
00000000000000000000000000000000000000000ggggg5566666666666666666555666666666666666555566666666666000000000000000000000000000000
00000000000000000000000000000000000000000gggge5566666666666666665556665555ee5656665555666666666660000000000000000000000000000000
00000000000000000000000000000000000000000gggge556666666666655555555555555ee55556655556666666666600000000000000000000000000000000
00000000000000000000000000000000000000000g0gge55666666666565555555555555ee555555555555666666660000000000000000000000000000000000
0000000000000000000000000000000000000000000gle5555655655555555555555555ee5555555555556666666600000000000000000000000000000000000
000000000000000000000000000000000000000000ggle6555555555555555555566666665655555555l5l655555000000000000000000000000000000000000
000000000000000000000000000000000000000000gg5e6666666655555555565666666666555l5llllllllglg00000000000000000000000000000000000000
00000000000000000000000000000000000000000ggg5666655555555556566666e66666665lllllgggg55l5l000000000000000000000000000000000000000
00000000000000000000000000000000000000000ggl566665e5e5e5e5666666ggg56ggl55555ggggggglll00000000000000000000000000000000000000000
00000000000000000000000000000000000000000ggl66665e5e5elele66ggggggggllllllllllllllllgg000000000000000000000000000000000000000000
00000000000000000000000000000000000000000ggl6666656llllll55555lllllllllllllgggg000gg00000000000000000000000000000000000000000000
00000000000000000000000000000000000000000gg5l665l5glglggggl5lllllllllgg00000000gggg000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000gg5l5lglggggggggggglllglggg000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000gll5l5llgggggggg00g00gg000000000000gggg000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000gllllllglggg000g0000gg00gg00000ggggggg0000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000gggggggggggg00gg0gggggggg000gggggggg000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000gggggggg0000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__gff__
0000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__meta:cart_info_start__
cart_type: game
game_name: Graphics with PICO-8
# Leave blank to use game-name
game_slug: 
jam_info: []
tagline: Build a graphics engine
time_left: null
develop_time: null
description: |
  A supplement to a presentation on building a graphics engine in PICO-8
controls:
  - inputs: [LEFT_ARROW_KEY, RIGHT_ARROW_KEY]
    desc: navigate slides
hints: ''
acknowledgements: ''
to_do: []
version: 0.1.0
img_alt: A 3d companion cube in shadow
about_extra: ''
number_players: [1]
__meta:cart_info_end__�
