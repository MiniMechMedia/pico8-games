pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
--toadally normal matching game  v0.1.0
--by caterpillar games 



gs = nil

dirs = {
	left = 0,
	right = 1,
	up = 2,
	down = 3,
	z = 4,
	x = 5
}

gameOverWin = 'win'
gameOverLose = 'lose'

function _init()
	poke(0x5f2d, 0x1 | 0x2)
	gs = {
		littleGrids = {
			initGrid2(vec2(0,11)),
			initGrid2(vec2(4,11)),
			initGrid2(vec2(8,11)),
			initGrid2(vec2(12,11))
		},
		flip = function(self, card)
			if card.isDead then
				return
			end
			card.isFlipped = not card.isFlipped
			local flipped = self:getFlipped()
			if #flipped == 2 then
				if flipped[1].spriteNumber == flipped[2].spriteNumber then
					gs.currentAnimation = cocreate(function()
						sfx(1)
						for i = 1, 10 do
							yield()
						end
						flipped[1].isDead = true
						flipped[2].isDead = true
						flipped[1].isFlipped = false
						flipped[2].isFlipped = false
						for i = 1, 10 do
							print(lessons[flipped[1].spriteNumber])
							yield()
						end

						if gs.phase == 2 then
							add(gs.projectiles, makeProjectile(
								flipped[1].spriteNumber,
								vec2(gs.boss.pos.x, 120),
								vec2(0, -50)
								))
						end
					end)
				else
					gs.currentAnimation = cocreate(function()
						sfx(0)
						for i = 1, 10 do
							yield()
						end
						flipped[1].isFlipped = false
						flipped[2].isFlipped = false
					end)
				end
			end
		end,
		getFlipped = function(self)
			local ret = {}
			for card in all(gs.matchObjects) do
				if card.isFlipped then
					add(ret, card)
				end
			end
			for grid in all(gs.littleGrids) do
				for card in all(grid.matchObjects) do
					if card.isFlipped then
						add(ret, card)
					end
				end
			end
			return ret
		end,
		isGameOver = false,
		gameOverState = nil,
		startTime = t(),
		endTime = nil,
		dt = 1/30.0,
		currentAnimation = nil,
		fireworks = {},
		matchGrid = {},
		matchObjects = {},
		hand = {
			pos = vec2(64, 64),
			isClosed = false,
			draw = function(self)
				if gs.phase == 1 then
					local spriteNumber = 30
					if self.isClosed then spriteNumber = 14 end
					spr(spriteNumber, self.pos.x - 5, self.pos.y - 3, 2, 1)
				elseif gs.phase == 2 then
					local spriteNumber = 29
					if sin(t() * 3) < 0 then
						spriteNumber = 45
					end

					if self.isTrapped and gs.boss:isAttacking() then
						local achieved = gs.boss:getTonguePosition(false)
						spr(spriteNumber, achieved.x, achieved.y)
						return
					end

					spr(spriteNumber, self.pos.x, self.pos.y)
				end
			end,
			update = function(self)
				self.pos = vec2(
					stat(32),
					stat(33)
					)
				self.isClosed = (stat(34) & 0x1) > 0
			end
		},
		projectiles = {},
		boss = {
			attackCooldown = 30,
			attackPhase = 0,
			pos = vec2(64, -60),
			health = 100,
			startHealth = 100,
			bounds = function(self)
				local topLeft = vec2(
					self.pos.x - 4 * 8 / 2, self.pos.y - 4 * 8 / 2)
				local bottomRight = topLeft + vec2(4 * 8, 4 * 8)
				return {
					topLeft = topLeft,
					bottomRight = bottomRight
				}
			end,
			target = vec2(64, 64),
			speed = 30,
			attackPhaseStart = 30,
			attack = function(self)
				self.attackPhase = self.attackPhaseStart
			end,
			isAttacking = function(self)
				return self.attackPhase > 0
			end,
			update = function(self)
				if gs.phase != 2 then
					return
				end
				self.attackCooldown -= 1
				self.attackPhase = max(self.attackPhase - 1, 0)
				if self.attackCooldown < 0 then
					self:attack()
					self.attackCooldown = 70
				end
				local delta = self.target - self.pos
				if delta:length() < 10 then
					self.target = vec2(rndrange(16, 128 - 16), rndrange(16, 64))
				end
				self.pos += delta:norm() * self.speed * gs.dt

				if self:isAttacking() then
					local achieved = self:getTonguePosition(true)
					if achieved:isWithin(gs.hand.pos, 4) then
						-- assert(false)
						gs.hand.isTrapped = true
					end
				else
					if gs.hand.isTrapped then
						gs.hand.isTrapped = false
						self.health = min(self.startHealth, self.health + 10)
						-- gs.hand.pos = self.pos:clone()
					end
				end

			end,
			tongueLength = function(self)
				local attackPhaseAngle = (self.attackPhaseStart - self.attackPhase) / (self.attackPhaseStart * 2)
				local tongueLength = -sin(attackPhaseAngle) * 100
				return tongueLength
			end,
			tongueHistory = {},
			getTonguePosition = function(self, active)
				local bounds = self:bounds()
				local topLeft = bounds.topLeft + vec2(23, 12)
				local delta = gs.hand.pos - topLeft
				local tongueLength = self:tongueLength()
				-- rectfill(topLeft.x, topLeft.y, topLeft.x + 2, topLeft.y + tongueLength, 14)
				-- line(topLeft.x + 1, topLeft.y, topLeft.x + 1, topLeft.y + tongueLength, 2)
				-- spr(28, topLeft.x - 2, topLeft.y + tongueLength - 1)
				delta = delta:norm() * min(tongueLength, delta:length() * 1.1)
				local achieved = topLeft + delta
				if #self.tongueHistory > 0 then
					local historical = vec2(0,0)
					for hist in all(self.tongueHistory) do
						historical += hist
					end
					historical /= #self.tongueHistory
					-- if self.attackPhase < self.attackPhaseStart * 3/ 4 then
						achieved = (1*achieved/3 + 2*historical/3)
					-- end
				end
				if active then
					add(self.tongueHistory, achieved)
					if #self.tongueHistory > 4 then
						deli(self.tongueHistory, 1)
					end
				end
				return achieved
			end,
			draw = function(self)
				if gs.phase == 2 then
					rectfill(0, 0, 128, 11, 5)
				end
				if self.health > 0 then
					rectfill(1, 1, 127 * self.health / 100 - 1, 10, 3)
				end
				local bounds = self:bounds()
				local topLeft = bounds.topLeft + vec2(23, 12)

				local spriteNumber = 72
				if self:isAttacking() then
					spriteNumber = 64
				end
				palt(0, false)
				palt(11, true)
				spr(spriteNumber, bounds.topLeft.x, bounds.topLeft.y, 4, 4)
				palt()
				-- circfill(self.target.x, self.target.y, 4, 8)
				if self:isAttacking() then
					
					local achieved = self:getTonguePosition(false)
					for xoff = 0, 2, 0.1 do
						-- local color = 14
						-- if 0.7 < xoff and xoff < 1.3 then
						-- 	color = 2
						-- end
						line(topLeft.x + xoff, topLeft.y, achieved.x + xoff, achieved.y, 14)
					end
					-- for xoff = 0.7, 1.3, 0.1 do
					-- 	line(topLeft.x + xoff, topLeft.y, achieved.x + xoff, achieved.y, 2)
					-- end
					spr(28, achieved.x - 2, achieved.y)
				else
					self.tongueHistory = {}
				end
			end
		}
	}

	gs.phase = 1
	-- add(gs.fireworks, makeFirework(vec2(64, 64), vec2(20, 10)))
	gs.matchGrid = initGrid()
	-- add(gs.projectiles, makeProjectile(3, vec2(64, 64), vec2(0, -40)))
end

function shuffle(t)
  -- do a fisher-yates shuffle
  -- if true then
  -- 	return
  -- end
  for i = #t, 1, -1 do
    local j = flr(rnd(i)) + 1
    t[i], t[j] = t[j], t[i]
  end
end



function makeProjectile(holidayNumber, pos, vel)
	return {
		spriteNumber = holidayNumber + 16,
		pos = pos,
		vel = vel,
		isDead = false,
		damage = 40,
		draw = function(self)
			spr(self.spriteNumber, self.pos.x - 4, self.pos.y)
		end,
		update = function(self)
			self.pos += self.vel * gs.dt
			if isInBounds(gs.boss:bounds(), self.pos) then
				gs.boss.health -= self.damage
				self.isDead = true
			end
		end
	}
end

function copyTable(tbl)
	local ret = {}
	for item in all(tbl) do
		add(ret, item)
	end
end

function isInBounds(bounds, pos)
			return bounds.topLeft.x < pos.x and pos.x < bounds.bottomRight.x
				and bounds.topLeft.y < pos.y and pos.y < bounds.bottomRight.y
end

function makeMatchObject(pos, spriteNumber, scale, offset)
	return {
		pos = pos + (offset or vec2(0, 0)),
		spriteNumber = spriteNumber,
		bounds = function(self)
			local topLeft = (self.pos - vec2(1,1)) * 10 * self.scale
			return {
				topLeft = topLeft,
				bottomRight = topLeft + vec2(8 * self.scale, 8 * self.scale)
			} 
		end,
		isHovered = function(self, pos)
			local bounds = self:bounds()
			return isInBounds(bounds, pos)
			-- return bounds.topLeft.x < pos.x and pos.x < bounds.bottomRight.x
				-- and bounds.topLeft.y < pos.y and pos.y < bounds.bottomRight.y
		end,
		isDead = false,
		scale = scale or 3,
		-- offset = offset or vec2(),
		draw = function(self)
			if self.isDead then
				return
			end
			local spriteNumber = self.spriteNumber

			-- TODO don't hack this
			if self:isHovered(gs.hand.pos) and (btnp(5)) then
				gs:flip(self)
			end

			if not self.isFlipped then
				if self:isHovered(gs.hand.pos) then
					spriteNumber = 12
				else
					spriteNumber = 13
				end
			end
			local bounds = self:bounds()
			sspr(
				spriteNumber * 8,
				0,
				8,
				8,
				bounds.topLeft.x,
				bounds.topLeft.y,
				8 * self.scale,
				8 * self.scale
				)
			-- spr(
			-- 	self.spriteNumber,
			-- 	self.pos.x * 10,
			-- 	self.pos.y * 10,
			-- 	false,
			-- 	false,
			-- 	1,
			-- 	1,
			-- 	4,
			-- 	4
			-- )
		end
	}
end

lessons = {
	'birthday',
	"valentine's day",
	"thanksgiving",
	"st. patrick's day",
	"christmas",
	"halloween",
	"easter",
	"4th of july"
}


function initGrid2(offset)
	local ret = {}
	local localMatchObjects = {}
  local images = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8}
  shuffle(images)
  local counter = 1
	for i = 1, 4 do
		ret[i] = {}
		for j = 1, 4 do
			ret[i][j] = makeMatchObject(
				vec2(i,j),
				images[counter],
				-- 1,

				1,
				offset
			)
			-- ret[i][j] = {
			-- 	pos = vec2(i, j),
			-- 	spriteNumber = images[counter]
			-- }
			add(localMatchObjects, ret[i][j])
			counter += 1
		end
	end

	return {
		matchObjects = localMatchObjects,
		getFlipped = function(self)
			local ret = {}
			for card in all(self.matchObjects) do
				if card.isFlipped then
					add(ret, card)
				end
			end
			return ret
		end,
		draw = function(self)
			for card in all(self.matchObjects) do
				card:draw()
			end
		end
	}
end
  local images = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8}

function initGrid()
	local ret = {}
  local images = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8}
  shuffle(images)
  local counter = 1
	for i = 1, 4 do
		ret[i] = {}
		for j = 1, 4 do
			ret[i][j] = makeMatchObject(
				vec2(i,j),
				images[counter],
				3,
				vec2(.25,.25)
			)
			-- ret[i][j] = {
			-- 	pos = vec2(i, j),
			-- 	spriteNumber = images[counter]
			-- }
			add(gs.matchObjects, ret[i][j])
			counter += 1
		end
	end
end

function rndrange(_min, _max)
	local diff = _max - _min
	return _min + diff * rnd()
end

metaTable = {
	__add = function(v1, v2)
		return vec2(v1.x + v2.x, v1.y + v2.y)
	end,
	__sub = function(v1, v2)
		return vec2(v1.x - v2.x, v1.y - v2.y)
	end,
	__mul = function(s, v)
		if type(s) == 'table' then
			s,v = v,s
		end

		return vec2(s * v.x, s * v.y)
	end,
	__div = function(v, s)
		return vec2(v.x / s, v.y / s)
	end,
	__eq = function(v1, v2)
		return v1.x == v2.x and v1.y == v2.y
	end
}

function vec2fromAngle(ang)
	return vec2(cos(ang), sin(ang))
end

function vecFromDir(dir)
	if dir == dirs.left then
		return vec2(-1, 0)
	elseif dir == dirs.right then
		return vec2(1, 0)
	elseif dir == dirs.up then
		return vec2(0, -1)
	elseif dir == dirs.down then
		return vec2(0, 1)
	else
		assert(false)
	end
end

function modInc(x, mod)
	return (x + 1) % mod
end

function modDec(x, mod)
	return (x - 1) % mod
end

function approx_magnitude(dx, dy)
	-- TODO
	return sqrt(dx * dx + dy * dy)
end

function vec2(x, y)
	local ret = {
		x = x,
		y = y,
		clone = function(self)
			return vec2(self.x, self.y)
		end,
		norm = function(self)
			return vec2fromAngle(atan2(self.x, self.y))
		end,
		squareDist = function(self, other)
			return max(abs(self.x - other.x), abs(self.y - other.y))
		end,
		taxiDist = function(self, other)
			return abs(self.x - other.x) + abs(self.y - other.y)
		end,
		-- Beware of using this on vectors that are more than 128 away
		eucDist = function(self, other)
			local dx = self.x - other.x
			local dy = self.y - other.y
			-- return sqrt(dx * dx + dy * dy)
			return approx_magnitude(dx, dy)
		end,
		isWithin = function(self, other, value)
			return self:taxiDist(other) <= value and
				self:eucDist(other) <= value
		end,
		isOnScreen = function(self, extra)
			if extra == nil then extra = 0 end

			return extra <= self.x and self.x <= 128 - extra
				and extra <= self.y and self.y <= 128 - extra
		end,
		length = function(self)
			return self:eucDist(vec2(0, 0))
		end,
		angle = function(self)
			return atan2(self.x, self.y)
		end
	}

	setmetatable(ret, metaTable)

	return ret
end


function hasAnimation()
	return gs.currentAnimation != nil and costatus(gs.currentAnimation) != 'dead'
end

function acceptInput()
	-- if stat(34) & 0x1 > 0 then

	-- end
end

function acceptInputPhase2()
	-- TODO?
end

function waitFor(num)
	for i = 1, num do
		yield()
	end
end

function _update()
	if gs.isGameOver then
		if gs.endTime == nil then
			gs.endTime = t()
		end
		-- Restart
		if btnp(dirs.x) then
			_init()
		end
		return
	end

	if hasAnimation() then
		local active, exception = coresume(gs.currentAnimation)
		if exception then
			stop(trace(gs.currentAnimation, exception))
		end

		-- return
	end

	if gs.phase == 1 then
		acceptInput()

		local liveCount = 0
		for card in all(gs.matchObjects) do
			if not card.isDead then liveCount += 1 end
		end
		if liveCount == 0 then
			gs.currentAnimation = cocreate(function()
				gs.phase = 1.5
				gs.boss.health = 0
				gs.animationText = 'congratulations!'
				sfx(2)
				for i = 1,100 do
					yield()
				end
				gs.animationText = ''
				for i = 1, 50 do
					yield()
				end
				gs.animationText = '...'
				for i = 1, 60 do
					yield()
				end
				gs.animationText = "something isn't right"
				waitFor(100)

				gs.supplementalDraw = function()
					local spriteNumber = 29
					if sin(t() * 3) < 0 then
						spriteNumber = 45
					end
					spr(spriteNumber, 64, 64)
				end

				waitFor(100)
				gs.animationText = 'that looks like a bug...'
				waitFor(100)
				gs.animationText = 'that means...'
				waitFor(40)
				gs.animationText = 'oh no!!!'
				waitFor(100)

				music(42)
				for i = 1, 60 do
					yield()
					gs.boss.health = i / 60 * gs.boss.startHealth
					gs.boss.pos = vec2(64, i * 0.5)
					camera(rndrange(-1,1), rndrange(-1,1))
				end
				camera()
				gs.boss.health = gs.boss.startHealth
				gs.phase = 2
			end)
		end

		for fw in all(gs.fireworks) do
			fw:update()
		end
	elseif gs.phase == 2 then
		acceptInputPhase2()
		for proj in all(gs.projectiles) do
			proj:update()
			if proj.isDead or proj.pos.y < -30 then
				del(gs.projectiles, proj)
			end
		end
		gs.boss:update()
		-- local newProj = copyTable(gs.projectiles)
		resurrectMiniGrid()
		-- for proj in all(newProj) do
		-- 	if proj.isDead then
		-- 		del(gs.projectiles, proj)
		-- 	end
		-- end
	end

	gs.hand:update()

	if gs.phase == 2 and gs.boss.health <= 0 then
		gs.gameOverState = 'win'
		gs.isGameOver = true
		music(6)
	end
end

function resurrectMiniGrid()
	allCards = {}
	for grid in all(gs.littleGrids) do
		for card in all(grid.matchObjects) do
			add(allCards, card)
		end
	end
	local toBringBack = rnd(allCards)
	-- rnd(allCards).isDead = false
	if toBringBack.isDead and rnd() < 0.1 then
		toBringBack.isDead = false
		toBringBack.spriteNumber = rnd({1,2,3,4,5,6,7,8})
	end
end

function drawGameOverWin()
	color(7)
	print('\n you win! (for real)\n\n press ❎ to play again')
end

function drawGameOverLose()

end

function makeFirework(pos, vel)
	return {
		pos = pos,
		vel = vel,
		col = 3,
		generation = 1,
		lifeLeft = 20,
		children = 10,
		draw = function(self)
			pset(self.pos.x, self.pos.y, self.col)
		end,
		spawnChild = function(self)
			local ret = makeFirework(
				self.pos,
				10 * vec2fromAngle(rnd())
				)
			ret.generation = self.generation - 1
			return ret
		end,
		update = function(self)
			self.pos += self.vel * gs.dt
			self.lifeLeft -= 1
			if self.lifeLeft < 0 then
				del(gs.fireworks, self)
				if self.generation > 0 then
					for i = 0, self.children do
						add(gs.fireworks, self:spawnChild())
					end
				end
			end
		end
	}
end

function drawMatchGrid()
	for obj in all(gs.matchObjects) do
		obj:draw()
	end
end



function _draw()
	cls(0)
	if gs.isGameOver then
		if gs.gameOverState == gameOverWin then
			drawGameOverWin()
		else
			drawGameOverLose()
		end
		return
	end

	if gs.phase == 1 then
		drawMatchGrid()

		for fw in all(gs.fireworks) do
			fw:draw()
		end
	elseif gs.phase == 2 then
		for grid in all(gs.littleGrids) do
			grid:draw()
		end
		gs.boss:draw()

		for proj in all(gs.projectiles) do
			proj:draw()
		end
	else
		print(gs.animationText, 1, 1, 7)
		gs.boss:draw()
		if gs.supplementalDraw then
			gs.supplementalDraw()
		end
	end

	gs.hand:draw()
end

__gfx__
0000000000000000000000000000000003333300000a000000004000000770000000000000000000000000000000000005555550066666600000000000000000
000000000a0a0a000800080000000400033333000003000000040000000077007118888800000000000000000000000055656655667677660066666660000000
007007000e0e0e0088808e8080904540333333300033300009999900000070701717777700000000000000000000000056665665677767766667676760000000
000770000e0e0e008888e880089044490f0f0f000033800099090990007777e01118888800000000000000000000000056566655676777666767676760000000
000770006777776088888880aa44448009fff9000333330099999990077770007777777700000000000000000000000055666565667776766777777760000000
007007007666667008888800044440800999990003c3330090909090077777008888888800000000000000000000000056656665677677766777777760000000
00000000677777600088800004444000033333003333333099090990777707000000000000000000000000000000000055665655667767666667777660000000
00000000777777700008000004444000033333000004000009999900007770000000000000000000000000000000000005555550066666600066666600000000
00000000000a000000060000000a0000033033000007700000777000000ff0000008000000000000000000000000000000eee000707000000066666660000000
0000000000a9a0000066600000aaa0003b303b30000770000777770000ffff00008880000000000000000000000000000eeeee00050000006667676760000000
00000000009890000004000000aaa00033b0b330000880000707070000ffff00088888000000000000000000000000000eeeee00000000006767676760000000
00000000000700000004000000aaa0000003000000888000077777000ffffff0008880000000000000000000000000000eeeee00000000006767676760000000
0000000000eee0000004000000aaa00033b0b33000888800077777000ffffff0008880000000000000000000000000000eeeee00000000006777777760000000
0000000000eee00000e4e00003aaa3003b303b3000888800077777000ffffff00088800000000000000000000000000000eee000000000006777777760000000
0000000000eee0000ee0ee00303a30300330330007888870077777000ffffff00088800000000000000000000000000000eee000000000006667777660000000
0000000000eee0000e000e000033300000000000077777700707070000ffff000009000000000000000000000000000000000000000000000066666600000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000707000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbb1bbbbbbbbb1bbb00000000000000000000000000000000bbbbbbbbbbbbbbbbbb1bbbbbbbbb1bbb00000000000000000010000000001000
bbbbbbbbbbbbbbbbb141bbbbbb1141bb00000000000000000000000000000000bbbbbbbbbbbbbbbbb141bbbbbb1141bb00000000000000000141000000114100
bbbbbbbbbbbbbbbb1f441111111f41bb00000000000000000000000000000000bbbbbbbbbbbbbbbb1f441111111f41bb00000000000000001f441111111f4100
bbbbbbbbbbbbbbbb1f444444444f41bb00000000000000000000000000000000bbbbbbbbbbbbbbbb1f444444444f41bb00000000000000001f444444444f4100
bbbbbbbbbbbbb14444994444444491bb00000000000000000000000000111000bbbbbbbbbbbbb14444994444444491bb00000000000001444499444444449100
bbbbbbbbbbbb1f44490094444449001b00000000000000000000000001133110bbbbbbbbbbbb1f44490094444449001b0000000000001f444900944444490010
bbbbbbbbbbb14444f99944404044991b06660011100011111001110001333610bbbbbbbbbbb14444f99944404044991b0000000000014444f999444040449910
bbbbbbbbbb144f44ffff44444444ff1b01111199a1111bbb111a991011333310bbbbbbbbbb144f44ffff44444444ff1b0000000000144f44ffff44444444ff10
bbbbbbbb114f4441444444004004444101361191a1bbbbbbbb1a919113bb3310bbbbbbbb114f444f44444000400444f100000000114f44414444440040044441
bbbbbbb1f444f411440000220220004101331191913bbb33331191913bb33310bbbbbbb1f444f444444404440440444100000001f444f4114400002202200041
bbbbbb1f44f44414402222eeeee222010133361113333333333119113ba33010bbbbbb1f44f4444444004444444400410000001f44f44414402222eeeee22201
bbbbbb14f444444440eeeeeeeeeee201013336133331333133331111bb333110bbbbbb14f4444444404441111114440100000014f444444440eeeeeeeeeee201
bbbbb144444444114400008888800041016336133333333333333331b3336100bbbbb14444444444444414444441444100000144444444114400008e2e800041
bbbbb144444444411444407888704441001336131111111111133331b3331100bbbbb14444444444444444444444444100000144444444411444407e2e704441
bb11144444444444444444000004441b00133311333333333331333133361000bb1114444444444444444444444f441b00111444444444444444440e2e044410
b144f4414444ff44444444444444441b001133611b3333333333333333311000b144f4414444ff44444444f4f444441b0144f4414444ff444444444e2e444410
1f444440144fff4444441f44f44041bb0061333611b3333333333333336100001f444440144fff4444441f44f44041bb1f444440144fff4444441f4e2e404100
1f4444440144ff44444404ff4ff041bb00011333611b333333333663361000001f4444440144ff44444404ff4ff041bb1f4444440144ff44444404fe2ef04100
1f4444444040f4444410fffffff0441b00001133361bb33333333633311000001f4444444040f4444410fffffff0441b1f4444444040f4444410fffe2ef04410
1f440f4444414f4440fffff4ffff041b000001633311bb3333333633311000001f440f4444414f4440fffff4ffff041b1f440f4444414f4440fffffe2eff0410
1f440f4f44400f4440ffffffffff141b0000001333611bb333331113361160001f440f4f44400f4440ffffffffff141b1f440f4f44400f4440fffffe2eff1410
144400f444440444401ffff4ffff041b00000011336111bb3361131113331160144400f444440444401ffff4ffff041b144400f444440444401ffff4ffff0410
1144440ff4f40444440fffffffff041b000006113311311111613310113331101144440ff4f40444440fffffffff041b1144440ff4f40444440fffffffff0410
b1444441f444f0044440fffffff1041b00006113301b33111111331001611310b1444441f444f0044440fffffff1041b01444441f444f0044440fffffff10410
b1f44444004ffff04444401fff10441b00061133061363110613311001161110b1f44444004ffff04444001fff10441b01f44444004ffff04444401fff104410
bb1f4444444000fff0444441ff44411b00611336011b11160611110300113610bb1f4444444000fff0444441ff44411b001f4444444000fff0444441ff444110
bbb1f44444444400f04414141014141b06113311111110000660030000011110bbb1f44444444400f04414141014141b0001f44444444400f044141410141410
bbbb14444441414401144141b111411b06166101003000000030000000000000bbbb14444441414401144141b111411b00001444444141440114414101114110
bbbbb111111414141bb1411bbbb111bb00111111000000000000000000000000bbbbb111111414141bb1411bbbb111bb00000111111414141001411000011100
bbbbbbbbbb111111bbb11bbbbbbbbbbb00000000000000000000000000000000bbbbbbbbbbb11111bbb11bbbbbbbbbbb00000000001111110001100000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000000
00000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000000
00000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000000
00000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000000
00000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000000
00000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000000
00000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000000
00000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000000
00000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000000
00000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000000
00000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000000
00000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000000
00000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000000
00000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000000
00000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000000
00000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000000
00000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000000
00000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000666666666666666666000000000000666666666666666666000000000000000000aaa0000000000000000000006666666666666666660000000000
0000000000666666666666666666000000000000666666666666666666000000000000000000aaa0000000000000000000006666666666666666660000000000
0000000000666666666666666666000000000000666666666666666666000000000000000000aaa0000000000000000000006666666666666666660000000000
00000006666667776667777776666660000006666667776667777776666660000000000000003330000000000000000006666667776667777776666660000000
00000006666667776667777776666660000006666667776667777776666660000000000000003330000000000000000006666667776667777776666660000000
00000006666667776667777776666660000006666667776667777776666660000000000000003330000000000000000006666667776667777776666660000000
00000006667777777776667777776660000006667777777776667777776660000000000003333333330000000000000006667777777776667777776660000000
00000006667777777776667777776660000006667777777776667777776660000000000003333333330000000000000006667777777776667777776660000000
00000006667777777776667777776660000006667777777776667777776660000000000003333333330000000000000006667777777776667777776660000000
00000006667776667777777776666660000006667776667777777776666660000000000003333338880000000000000006667776667777777776666660000000
00000006667776667777777776666660000006667776667777777776666660000000000003333338880000000000000006667776667777777776666660000000
00000006667776667777777776666660000006667776667777777776666660000000000003333338880000000000000006667776667777777776666660000000
00000006666667777777776667776660000006666667777777776667776660000000003333333333333330000000000006666667777777776667776660000000
00000006666667777777776667776660000006666667777777776667776660000000003333333333333330000000000006666667777777776667776660000000
00000006666667777777776667776660000006666667777777776667776660000000003333333333333330000000000006666667777777776667776660000000
0000000666777777666777777777666000000666777777666777777777666000000000333ccc3333333330000000000006667777776667777777776660000000
0000000666777777666777777777666000000666777777666777777777666000000000333ccc3333333330000000000006667777776667777777776660000000
0000000666777777666777777777666000000666777777666777777777666000000000333ccc3333333330006666666006667777776667777777776660000000
00000006666667777776667776666660000006666667777776667776666660000003333333333333333333666767676006666667777776667776666660000000
00000006666667777776667776666660000006666667777776667776666660000003333333333333333333676767676006666667777776667776666660000000
00000006666667777776667776666660000006666667777776667776666660000003333333333333333333676767676006666667777776667776666660000000
00000000006666666666666666660000000000006666666666666666660000000000000000004440000000677777776000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000000000004440000000677777776000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000000000004440000000666777766000006666666666666666660000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006666660000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666666666666666660000000000000000007777770000000000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000000000007777770000000000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000000000007777770000000000000000006666666666666666660000000000006666666666666666660000000000
00000006666667776667777776666660000000000000000007777770000000000006666667776667777776666660000006666667776667777776666660000000
00000006666667776667777776666660000000000000000007777770000000000006666667776667777776666660000006666667776667777776666660000000
00000006666667776667777776666660000000000000000007777770000000000006666667776667777776666660000006666667776667777776666660000000
00000006667777777776667777776660000000000000000007770007770000000006667777777776667777776660000006667777777776667777776660000000
00000006667777777776667777776660000000000000000007770007770000000006667777777776667777776660000006667777777776667777776660000000
00000006667777777776667777776660000000000000000007770007770000000006667777777776667777776660000006667777777776667777776660000000
0000000666777666777777777666666000000000000777777777777eee0000000006667776667777777776666660000006667776667777777776666660000000
0000000666777666777777777666666000000000000777777777777eee0000000006667776667777777776666660000006667776667777777776666660000000
0000000666777666777777777666666000000000000777777777777eee0000000006667776667777777776666660000006667776667777777776666660000000
00000006666667777777776667776660000000007777777777770000000000000006666667777777776667776660000006666667777777776667776660000000
00000006666667777777776667776660000000007777777777770000000000000006666667777777776667776660000006666667777777776667776660000000
00000006666667777777776667776660000000007777777777770000000000000006666667777777776667776660000006666667777777776667776660000000
00000006667777776667777777776660000000007777777777777770000000000006667777776667777777776660000006667777776667777777776660000000
00000006667777776667777777776660000000007777777777777770000000000006667777776667777777776660000006667777776667777777776660000000
00000006667777776667777777776660000000007777777777777770000000000006667777776667777777776660000006667777776667777777776660000000
00000006666667777776667776666660000007777777777770007770000000000006666667777776667776666660000006666667777776667776666660000000
00000006666667777776667776666660000007777777777770007770000000000006666667777776667776666660000006666667777776667776666660000000
00000006666667777776667776666660000007777777777770007770000000000006666667777776667776666660000006666667777776667776666660000000
00000000006666666666666666660000000000000007777777770000000000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000000007777777770000000000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000000007777777770000000000000000006666666666666666660000000000006666666666666666660000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000000
00000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000000
00000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000006666667776667777776666660000000
00000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000000
00000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000000
00000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000006667777777776667777776660000000
00000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000000
00000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000000
00000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000006667776667777777776666660000000
00000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000000
00000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000000
00000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000006666667777777776667776660000000
00000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000000
00000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000000
00000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000006667777776667777777776660000000
00000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000000
00000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000000
00000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000006666667777776667776666660000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000006666666666666666660000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000102020500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000508070600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000704080100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000304060300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100001a0501f05022050200501f0501b05015050120500e0500d0500b0500b0500b0500a0500c0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000905009050090500905009050090500905009050090500905009050090500a0500b0500d0500f0501205015050170501b0501f0502105000000000000000000000000000000000000000000000000000
010c0000000001072513725187251c7251f725247252b70512725157251a7251e72521725267252d70514725177251c7252072523725287252f72534705000001ca051ca051ca051ca051ca051ca051ca051ca05
010f00000c033225152e5153a515246152b7070a145350150c003290153200529005246152501526015220150c0331e0251f0252700524615225051a0152250522015225152201522515246150a7110a0001d005
0112000003744030250a7040a005137441302508744080251b7110a704037440302524615080240a7440a02508744087250a7040c0241674416025167251652527515140240c7440c025220152e015220150a525
011200000c033247151f5152271524615227151b5051b5151f5201f5201f5221f510225212252022522225150c0331b7151b5151b715246151b5151b5051b515275202752027522275151f5211f5201f5221f515
011200000c0330802508744080250872508044187151b7151b7000f0251174411025246150f0240c7440c0250c0330802508744080250872508044247152b715275020f0251174411025246150f0240c7440c025
011200002452024520245122451524615187151b7151f71527520275202751227515246151f7151b7151f715295202b5212b5122b5152461524715277152e715275002e715275022e715246152b7152771524715
011200002352023520235122351524615177151b7151f715275202752027512275152461523715277152e7152b5202c5212c5202c5202c5202c5222c5222c5222b5202b5202b5222b515225151f5151b51516515
011200000c0330802508744080250872508044177151b7151b7000f0251174411025246150f0240b7440b0250c0330802508744080250872524715277152e715080242e715080242e715246150f0240c7440c025
011600000042500415094250a4250042500415094250a42500425094253f2050a42508425094250a425074250c4250a42503425004150c4250a42503425004150c42500415186150042502425024250342504425
011600000c0330c4130f54510545186150c0330f545105450c0330f5450c41310545115450f545105450c0230c0330c4131554516545186150c03315545165450c0330c5450f4130f4130e5450e5450f54510545
0116000005425054150e4250f42505425054150e4250f425054250e4253f2050f4250d4250e4250f4250c4250a4250a42513425144150a4250a42513425144150a42509415086150741007410074120441101411
011600000c0330c4131454515545186150c03314545155450c033145450c413155451654514545155450c0230c0330c413195451a545186150c033195451a5451a520195201852017522175220c033186150c033
010b00200c03324510245102451024512245122751127510186151841516215184150c0031841516215134150c033114151321516415182151b4151d215224151861524415222151e4151d2151c4151b21518415
011400001051512515150151a5151051512515150151a5151051512515150151a5151051512515150151a5151051512515170151c5151051512515170151c5151051512515160151c5151051512515160151c515
011400000c0330253502525020450e6150252502045025250c0330253502525020450e6150252502045025250c0330252502045025350e6150204502535025250c0330253502525020450e615025250204502525
011400002c7252c0152c7152a0252a7152a0152a7152f0152c7252c0152c7152801525725250152a7252a0152072520715207151e7251e7151e7151e715217152072520715207151e7251e7151e7151e7151e715
011400000c0330653506525060450e6150652506045065250c0330653506525060450e6150652506045065250c0330952509045095350e6150904509535095250c0330953509525090450e615095250904509525
0114000020725200152071520015217252101521715210152c7252c0152c7152c0152a7252a0152a7152a015257252501525715250152672526015267153401532725310152d715280152672525015217151c015
010e000005145185111c725050250c12524515185150c04511045185151d515110250c0451d5151d0250c0450a0451a015190150a02505145190151a015050450c0451d0151c0150012502145187150414518715
010e000021745115152072521735186152072521735186052d7142b7142971426025240351151521035115151d0451c0051c0251d035186151c0251d035115151151530715247151871524716187160c70724717
010e000002145185111c72502125091452451518515090250e045185151d5150e025090451d5151d025090450a0451a015190150a02505045190151a015050450c0451d0151c0150012502145187150414518715
010e000029045000002802529035186152802529035000001a51515515115150e51518615000002603500000240450000023025240351861523025240350000015515185151c51521515186150c615280162d016
010e000002145185112072521025090452451518515090450e04521515265150e025090451d5151d01504045090451d01520015210250414520015210250404509045280152d0150702505145187150414518715
011a00000173401025117341102512734120250873408025127341202501734010251173411025087340802505734050250d7340d025147341402506734060250873408025127341202511734110250d7340d025
010d00200c0331b51119515195152071220712145151451518615317151d5151d515125050c03314515145150c0330150519515195150d517205161451514515186153171520515205150d5110c033145150c033
011a00000a7340a02511734110250d7340d02505734050250673406025147341402511734110250d7340d0250a7340a02511734110250d7340d02508734080250373403025127341202511734110250d7340d025
010d00200c0331b511295122951220712207122c5102c51018615315143151531514295150c03329515295150c0330150525515255150d517205162051520515186153171520515205150d5110c033145150c033
01180000021100211002110021120e1140e1100e1100e1120d1140d1100d1100d1120d1120940509110091120c1100c1100c1100c1120b1110b1100b1100b1120a1100a1100a1100a11209111091100911009112
01180000117201172011722117221d7201d7201d7221d7221c7211c7201c7201c7201c7221c72218720187221b7211b7201b7201b7201b7221b7221d7221d7221a7201a7201a7201a7201a7221a7221672016722
011800001972019720197221972218720187201872018720147201472015720157201f7211f7201d7201d7201c7201c7201c7221c7221a7201a7201a7221a7251a7201a7201a7221a72219721197201972219722
011800001a7201a7201a7221a7221c7201c7201c7221c7221e7201e7202172021720247212472023720237202272022720227202272022722227221f7201f7202272122720227202272221721217202172221722
0118000002114021100211002112091140911009110091120e1140e1100c1100c1120911209110081100811207110071100711007112061110611006110061120111101110011100111202111021100211002112
0118000020720207202072220722217202172021722217222b7212b72029720297202872128720267202672526720267202672026720267222672228721287202672026720267202672225721257202572225722
010e00000c0231951517516195150c0231751519516175150c0231951517516195150c0231751519516175150c023135151f0111f5110c0231751519516175150c0231e7111e7102a7100c023175151951617515
010e000000130070200c51000130070200a51000130070200c51000130070200a5200a5200a5120a5120a51200130070200c51000130070200a51000130070200c510001300b5200a5200a5200a5120a5120a512
010e00000c0231e5151c5161e5150c0231c5151e5161c5150c0231e5151c5161e5150c0231c5151e5161c5150c0230c51518011185110c0231c5151e5161c5150c0231e7111e7102a7100c023175151951617515
010e0000051300c02011010051300c0200f010051300c02011010051300c0200f0200f0200f0120f0120f012061300d02012010071300e02013010081300f0201503012020140101201015030120201401012010
010700000c5370f0370c5270f0270f537120370f527120271e537230371e527230272f537260372f52726027165371903716527190271c537190371c527210271c53621036245262102624536330362452633026
018800000074400730007320073200730007300073200732007300073200730007320073000732007320073200732007300073000730007320073000730007300073200732007300073000732007300073200732
01640020070140801107011060110701108011070110601100013080120701106511070110801707012060110c013080120701106011050110801008017005350053408010070110601100535080170701106011
018800000073000730007320073200730007300073200732007300073200730007320073000732007320073200732007300073000730007320073000730007300073200732007300073000732007300073200732
0164002006510075110851707512060110c0130801207011060110501108017070120801107011060110701108011075110651100523080120701108017005350053408012070110601100535080170701106511
011800001d5351f53516525275151d5351f53516525275151f5352053518525295151f5352053518525295151f5352053517525295151f5352053517525295151d5351f53516525275151d5351f5351652527515
010c00200c0330f13503130377140313533516337140c033306150c0330313003130031253e5153e5150c1430c043161340a1351b3130a1353a7143a7123a715306153e5150313003130031251b3130c0331b313
010c00200c0331413508130377140813533516337140c033306150c0330813008130081253e5153e5150c1330c0430f134031351b313031353a7143a7123a715306153e5150313003130031251b3130c0333e515
011800001f5452253527525295151f5452253527525295151f5452253527525295151f5452253527525295151f5452353527525295151f5452353527525295151f5452253527525295151f545225352752529515
010c002013035165351b0351d53513025165251b0251d52513015165151b0151d51513015165151b0151d51513015165151b0151d51513015165151b0151d51513015165151b0151d51513015165251b0351d545
011200000843508435122150043530615014351221502435034351221508435084353061512215054250341508435084350043501435306150243512215034351221512215084350843530615122151221524615
011200000c033242352323524235202351d2352a5111b1350c0331b1351d1351b135201351d135171350c0330c0332423523235202351d2351b235202352a5110c03326125271162c11523135201351d13512215
0112000001435014352a5110543530615064352a5110743508435115152a5110d43530615014352a511084150d4350d4352a5110543530615064352a5110743508435014352a5110143530615115152a52124615
011200000c033115152823529235282352923511515292350c0332823529216282252923511515115150c0330c033115151c1351d1351c1351d135115151d1350c03323135115152213523116221352013522135
0112000001435014352a5110543530615064352a5110743508435115152a5110d435306150143502435034350443513135141350743516135171350a435191351a1350d4351c1351d1351c1351d1352a5001e131
011200000c033115152823529235282352923511515292350c0332823529216282252923511515115150c0330c033192351a235246151c2351d2350c0331f235202350c033222352323522235232352a50030011
0114001800140005351c7341c725247342472505140055352173421725287342872504140045351f7341f725247342472502140025351d7341d72524734247250000000000000000000000000000000000000000
011400180c043287252b0152f72534015377253061528725290152d72530015377250c0432f7253001534725370153c725306152b7252d01532725370153b7250000000000000000000000000000000000000000
0114001809140095351f7341f7252473424725091400953518734187251f7341f72505140055351f7341f7252473424725051400553518734187251f7341f7250000000000000000000000000000000000000000
0114001802140025351f7341f725247342472504140045351f7341f725247342472505140055352b7242b715307243071507140075352b7242b71534724347150000000000000000000000000000000000000000
011400180c0433772534015307252f0152d725306152d7252f0153072534015377250c0433772534015307252f0152d725306152d7252f0153072534015377250000000000000000000000000000000000000000
011400180c0433c7253701534725300152f725306152f7253001534725370153c7250c0433c7253701534725300152f725306152f7253001534725370153c7250000000000000000000000000000000000000000
011400180c043287252b0152f725340153772530615287252901530725370153c7250c043287252901530725370153c72530615287252901530725370153c7250000000000000000000000000000000000000000
011400180c003287052b0052f705340053770530605287052900530705370053c7050c0032f7053000534705370053c705306052b7052d00532705370053b7050000000000000000000000000000000000000000
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00014344
00 00014344
01 00014344
00 00014344
00 02034344
02 02034344
00 04424344
00 04424344
00 04054344
00 04054344
01 04054344
00 04054344
00 06074344
02 08094344
01 0a0b4344
00 0c0d4344
00 0a0e4344
02 0c0e4344
00 10424344
01 100f4344
00 100f4344
00 10114344
00 12114344
02 12134344
01 14154344
00 14154344
00 16154344
00 16154344
00 18174344
02 16174344
00 19424344
01 191a4344
00 191a4344
00 1b1a4344
00 191c4344
02 1b1c4344
01 1d1e4344
00 1d1f4344
00 1d1e4344
00 1d1f4344
00 21204344
02 1d224344
00 27424344
01 24234344
00 24234344
02 26254344
01 28294344
03 2a2b4344
01 2d304344
00 2e304344
00 2d304344
00 2e304344
00 2d2c4344
00 2d2c4344
02 2e2f4344
01 31324344
00 31324344
00 33344344
02 35364344
01 3738433f
00 3738433f
00 393b433f
00 393c433f
02 3a3d433f

